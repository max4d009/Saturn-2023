
MainboardProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000005fe  00000692  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000056  00800110  00800110  000006a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000107a  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000908  00000000  00000000  00001816  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e8  00000000  00000000  0000211e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00002908  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000634  00000000  00000000  00002a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000057f  00000000  00000000  0000304c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000035cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	21 c0       	rjmp	.+66     	; 0x44 <__ctors_end>
   2:	3b c0       	rjmp	.+118    	; 0x7a <__bad_interrupt>
   4:	3a c0       	rjmp	.+116    	; 0x7a <__bad_interrupt>
   6:	39 c0       	rjmp	.+114    	; 0x7a <__bad_interrupt>
   8:	38 c0       	rjmp	.+112    	; 0x7a <__bad_interrupt>
   a:	37 c0       	rjmp	.+110    	; 0x7a <__bad_interrupt>
   c:	36 c0       	rjmp	.+108    	; 0x7a <__bad_interrupt>
   e:	35 c0       	rjmp	.+106    	; 0x7a <__bad_interrupt>
  10:	34 c0       	rjmp	.+104    	; 0x7a <__bad_interrupt>
  12:	33 c0       	rjmp	.+102    	; 0x7a <__bad_interrupt>
  14:	32 c0       	rjmp	.+100    	; 0x7a <__bad_interrupt>
  16:	31 c0       	rjmp	.+98     	; 0x7a <__bad_interrupt>
  18:	30 c0       	rjmp	.+96     	; 0x7a <__bad_interrupt>
  1a:	2f c0       	rjmp	.+94     	; 0x7a <__bad_interrupt>
  1c:	2e c0       	rjmp	.+92     	; 0x7a <__bad_interrupt>
  1e:	2d c0       	rjmp	.+90     	; 0x7a <__bad_interrupt>
  20:	2c c0       	rjmp	.+88     	; 0x7a <__bad_interrupt>
  22:	2b c0       	rjmp	.+86     	; 0x7a <__bad_interrupt>
  24:	2a c0       	rjmp	.+84     	; 0x7a <__bad_interrupt>
  26:	29 c0       	rjmp	.+82     	; 0x7a <__bad_interrupt>
  28:	28 c0       	rjmp	.+80     	; 0x7a <__bad_interrupt>
  2a:	27 c0       	rjmp	.+78     	; 0x7a <__bad_interrupt>
  2c:	26 c0       	rjmp	.+76     	; 0x7a <__bad_interrupt>
  2e:	25 c0       	rjmp	.+74     	; 0x7a <__bad_interrupt>
  30:	31 c0       	rjmp	.+98     	; 0x94 <__vector_24>
  32:	23 c0       	rjmp	.+70     	; 0x7a <__bad_interrupt>
  34:	5a c2       	rjmp	.+1204   	; 0x4ea <_Z10set_optioncc+0x16>
  36:	5d c2       	rjmp	.+1210   	; 0x4f2 <_Z10set_optioncc+0x1e>
  38:	74 c2       	rjmp	.+1256   	; 0x522 <__stack+0x23>
  3a:	9a c2       	rjmp	.+1332   	; 0x570 <__stack+0x71>
  3c:	76 c2       	rjmp	.+1260   	; 0x52a <__stack+0x2b>
  3e:	86 c2       	rjmp	.+1292   	; 0x54c <__stack+0x4d>
  40:	8e c2       	rjmp	.+1308   	; 0x55e <__stack+0x5f>
  42:	91 c2       	rjmp	.+1314   	; 0x566 <__stack+0x67>

00000044 <__ctors_end>:
  44:	11 24       	eor	r1, r1
  46:	1f be       	out	0x3f, r1	; 63
  48:	cf ef       	ldi	r28, 0xFF	; 255
  4a:	d4 e0       	ldi	r29, 0x04	; 4
  4c:	de bf       	out	0x3e, r29	; 62
  4e:	cd bf       	out	0x3d, r28	; 61

00000050 <__do_copy_data>:
  50:	11 e0       	ldi	r17, 0x01	; 1
  52:	a0 e0       	ldi	r26, 0x00	; 0
  54:	b1 e0       	ldi	r27, 0x01	; 1
  56:	ee ef       	ldi	r30, 0xFE	; 254
  58:	f5 e0       	ldi	r31, 0x05	; 5
  5a:	02 c0       	rjmp	.+4      	; 0x60 <__do_copy_data+0x10>
  5c:	05 90       	lpm	r0, Z+
  5e:	0d 92       	st	X+, r0
  60:	a0 31       	cpi	r26, 0x10	; 16
  62:	b1 07       	cpc	r27, r17
  64:	d9 f7       	brne	.-10     	; 0x5c <__do_copy_data+0xc>

00000066 <__do_clear_bss>:
  66:	21 e0       	ldi	r18, 0x01	; 1
  68:	a0 e1       	ldi	r26, 0x10	; 16
  6a:	b1 e0       	ldi	r27, 0x01	; 1
  6c:	01 c0       	rjmp	.+2      	; 0x70 <.do_clear_bss_start>

0000006e <.do_clear_bss_loop>:
  6e:	1d 92       	st	X+, r1

00000070 <.do_clear_bss_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b2 07       	cpc	r27, r18
  74:	e1 f7       	brne	.-8      	; 0x6e <.do_clear_bss_loop>
  76:	7e d2       	rcall	.+1276   	; 0x574 <main>
  78:	c0 c2       	rjmp	.+1408   	; 0x5fa <_exit>

0000007a <__bad_interrupt>:
  7a:	c2 cf       	rjmp	.-124    	; 0x0 <__vectors>

0000007c <_Z21m4d_i2c_init_as_slavev>:
volatile uint8_t i2c_data_current = 0;

// Инициализаця в роли ведомого устройства
void m4d_i2c_init_as_slave(void)
{
	TWAR = ME_ADDR & 0xFE;
  7c:	8e e5       	ldi	r24, 0x5E	; 94
  7e:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
	TWCR = (1 << TWEN)|(1 << TWEA)|(1 << TWINT)|(1 << TWIE);
  82:	85 ec       	ldi	r24, 0xC5	; 197
  84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	while (!(TWCR & (1<<TWINT)));
  88:	ec eb       	ldi	r30, 0xBC	; 188
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	88 23       	and	r24, r24
  90:	ec f7       	brge	.-6      	; 0x8c <_Z21m4d_i2c_init_as_slavev+0x10>
		
	// while(TWCR&(0xF8)!=(0x60));
}
  92:	08 95       	ret

00000094 <__vector_24>:
{
	TWCR =  (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
}

ISR(TWI_vect)
{
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	ef 93       	push	r30
  a4:	ff 93       	push	r31
	status = TWSR & 0xF8;
  a6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  aa:	88 7f       	andi	r24, 0xF8	; 248
  ac:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <status>
	uint8_t send_count = 2;
	switch (status)
  b0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <status>
  b4:	88 3a       	cpi	r24, 0xA8	; 168
  b6:	b9 f1       	breq	.+110    	; 0x126 <__vector_24+0x92>
  b8:	38 f4       	brcc	.+14     	; 0xc8 <__vector_24+0x34>
  ba:	80 38       	cpi	r24, 0x80	; 128
  bc:	79 f0       	breq	.+30     	; 0xdc <__vector_24+0x48>
  be:	80 3a       	cpi	r24, 0xA0	; 160
  c0:	39 f1       	breq	.+78     	; 0x110 <__vector_24+0x7c>
  c2:	81 11       	cpse	r24, r1
  c4:	51 c0       	rjmp	.+162    	; 0x168 <__vector_24+0xd4>
  c6:	4c c0       	rjmp	.+152    	; 0x160 <__vector_24+0xcc>
  c8:	80 3c       	cpi	r24, 0xC0	; 192
  ca:	09 f4       	brne	.+2      	; 0xce <__vector_24+0x3a>
  cc:	41 c0       	rjmp	.+130    	; 0x150 <__vector_24+0xbc>
  ce:	88 3c       	cpi	r24, 0xC8	; 200
  d0:	09 f4       	brne	.+2      	; 0xd4 <__vector_24+0x40>
  d2:	42 c0       	rjmp	.+132    	; 0x158 <__vector_24+0xc4>
  d4:	88 3b       	cpi	r24, 0xB8	; 184
  d6:	09 f0       	breq	.+2      	; 0xda <__vector_24+0x46>
  d8:	47 c0       	rjmp	.+142    	; 0x168 <__vector_24+0xd4>
  da:	27 c0       	rjmp	.+78     	; 0x12a <__vector_24+0x96>
	{
		case 0x80:
		{  // Пришли данные от мастера. (До это мы уже приняли свой адрес)
			char data = TWDR;
  dc:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
			if (transactProcess == 0) {
  e0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <transactProcess>
  e4:	81 11       	cpse	r24, r1
  e6:	06 c0       	rjmp	.+12     	; 0xf4 <__vector_24+0x60>
				transactType = data;
  e8:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <transactType>
				transactProcess = 1;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <transactProcess>
  f2:	0a c0       	rjmp	.+20     	; 0x108 <__vector_24+0x74>
			} else {
				transactData[transactCounter] = data;
  f4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  f8:	e8 2f       	mov	r30, r24
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	e0 50       	subi	r30, 0x00	; 0
  fe:	ff 4f       	sbci	r31, 0xFF	; 255
 100:	90 83       	st	Z, r25
				transactCounter++;
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
char transactData[3] = {' '};
	

static void send_ack()
{
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
 108:	85 ec       	ldi	r24, 0xC5	; 197
 10a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 10e:	2f c0       	rjmp	.+94     	; 0x16e <__vector_24+0xda>
			}
			send_ack();
			break;
		}
		case 0xA0:;
			transactProcess = 0;
 110:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <transactProcess>
			transactCounter = 0;
 114:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
			need_execute = 1;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <need_execute>
char transactData[3] = {' '};
	

static void send_ack()
{
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
 11e:	85 ec       	ldi	r24, 0xC5	; 197
 120:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 124:	24 c0       	rjmp	.+72     	; 0x16e <__vector_24+0xda>
			need_execute = 1;
			send_ack();
		break;
		case 0xa8:
		{
			 i2c_data_current = 0;
 126:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <i2c_data_current>
		}
		case 0xb8:
		{
			TWDR = 0;
 12a:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
			i2c_data_current++;
 12e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <i2c_data_current>
 132:	8f 5f       	subi	r24, 0xFF	; 255
 134:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <i2c_data_current>
			if (i2c_data_current == send_count) {
 138:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <i2c_data_current>
 13c:	82 30       	cpi	r24, 0x02	; 2
 13e:	21 f4       	brne	.+8      	; 0x148 <__vector_24+0xb4>
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
}

static void send_n_ack()
{
	TWCR =  (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
 140:	85 e8       	ldi	r24, 0x85	; 133
 142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 146:	13 c0       	rjmp	.+38     	; 0x16e <__vector_24+0xda>
char transactData[3] = {' '};
	

static void send_ack()
{
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
 148:	85 ec       	ldi	r24, 0xC5	; 197
 14a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 14e:	0f c0       	rjmp	.+30     	; 0x16e <__vector_24+0xda>
 150:	85 ec       	ldi	r24, 0xC5	; 197
 152:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 156:	0b c0       	rjmp	.+22     	; 0x16e <__vector_24+0xda>
 158:	85 ec       	ldi	r24, 0xC5	; 197
 15a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 15e:	07 c0       	rjmp	.+14     	; 0x16e <__vector_24+0xda>
			send_ack();
			break;
		}
		case 0x00:
		{
			TWCR = 0xd5;
 160:	85 ed       	ldi	r24, 0xD5	; 213
 162:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			break;
 166:	03 c0       	rjmp	.+6      	; 0x16e <__vector_24+0xda>
		}
		default:
		{
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|(0<<TWWC);  
 168:	85 ec       	ldi	r24, 0xC5	; 197
 16a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			//send_ack();
		}
		
	}
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <_Z21execute_command_timerv>:

uint8_t execute_command_timer()
{
	if (need_execute == 0) {
 180:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <need_execute>
 184:	88 23       	and	r24, r24
 186:	99 f0       	breq	.+38     	; 0x1ae <_Z21execute_command_timerv+0x2e>
		return 0;
	}
	switch (transactType) {
 188:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <transactType>
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	19 f0       	breq	.+6      	; 0x196 <_Z21execute_command_timerv+0x16>
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	29 f0       	breq	.+10     	; 0x19e <_Z21execute_command_timerv+0x1e>
 194:	09 c0       	rjmp	.+18     	; 0x1a8 <_Z21execute_command_timerv+0x28>
		case I2C_MOTHERBOARD_START_TRANSACTION_SYMBOL_MODE:
			set_mode(transactData[0]);
 196:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 19a:	48 d1       	rcall	.+656    	; 0x42c <_Z8set_modeh>
		break;
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <_Z21execute_command_timerv+0x28>
		case I2C_MOTHERBOARD_START_TRANSACTION_SYMBOL_OPTION:
			set_option(transactData[0], transactData[1]);
 19e:	e0 e0       	ldi	r30, 0x00	; 0
 1a0:	f1 e0       	ldi	r31, 0x01	; 1
 1a2:	61 81       	ldd	r22, Z+1	; 0x01
 1a4:	80 81       	ld	r24, Z
 1a6:	96 d1       	rcall	.+812    	; 0x4d4 <_Z10set_optioncc>
		break;
	}
	need_execute = 0;
 1a8:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <need_execute>
	return 1;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	08 95       	ret

000001b0 <_Z23relay_all_pins_to_statei>:
uint32_t mute_delay = 0;

void relay_all_pins_to_state(int state)
{
	uint8_t i;
	if (state) {
 1b0:	89 2b       	or	r24, r25
 1b2:	c1 f0       	breq	.+48     	; 0x1e4 <_Z23relay_all_pins_to_statei+0x34>
 1b4:	e4 e0       	ldi	r30, 0x04	; 4
 1b6:	f1 e0       	ldi	r31, 0x01	; 1
 1b8:	60 e1       	ldi	r22, 0x10	; 16
 1ba:	71 e0       	ldi	r23, 0x01	; 1
		for (i = 0; i < RELAY_PINS_DDRD_COUNT; i++) {
			PORTD |= (1 << RELAY_PINS_DDRD[i]);
 1bc:	41 e0       	ldi	r20, 0x01	; 1
 1be:	50 e0       	ldi	r21, 0x00	; 0
 1c0:	2b b1       	in	r18, 0x0b	; 11
 1c2:	80 81       	ld	r24, Z
 1c4:	32 96       	adiw	r30, 0x02	; 2
 1c6:	da 01       	movw	r26, r20
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <_Z23relay_all_pins_to_statei+0x1e>
 1ca:	aa 0f       	add	r26, r26
 1cc:	bb 1f       	adc	r27, r27
 1ce:	8a 95       	dec	r24
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <_Z23relay_all_pins_to_statei+0x1a>
 1d2:	cd 01       	movw	r24, r26
 1d4:	82 2b       	or	r24, r18
 1d6:	8b b9       	out	0x0b, r24	; 11

void relay_all_pins_to_state(int state)
{
	uint8_t i;
	if (state) {
		for (i = 0; i < RELAY_PINS_DDRD_COUNT; i++) {
 1d8:	6e 17       	cp	r22, r30
 1da:	7f 07       	cpc	r23, r31
 1dc:	89 f7       	brne	.-30     	; 0x1c0 <_Z23relay_all_pins_to_statei+0x10>
			PORTD |= (1 << RELAY_PINS_DDRD[i]);
		}
		for (i = 0; i < RELAY_PINS_DDRB_COUNT; i++) {
			PORTB |= (1 << RELAY_PINS_DDRB[i]);
 1de:	2e 9a       	sbi	0x05, 6	; 5
 1e0:	2f 9a       	sbi	0x05, 7	; 5
 1e2:	08 95       	ret
 1e4:	e4 e0       	ldi	r30, 0x04	; 4
 1e6:	f1 e0       	ldi	r31, 0x01	; 1
 1e8:	60 e1       	ldi	r22, 0x10	; 16
 1ea:	71 e0       	ldi	r23, 0x01	; 1
		}		
	} else {
		for (i = 0; i < RELAY_PINS_DDRD_COUNT; i++) {
			PORTD &= ~(1 << RELAY_PINS_DDRD[i]);
 1ec:	41 e0       	ldi	r20, 0x01	; 1
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	9b b1       	in	r25, 0x0b	; 11
 1f2:	80 81       	ld	r24, Z
 1f4:	32 96       	adiw	r30, 0x02	; 2
 1f6:	9a 01       	movw	r18, r20
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <_Z23relay_all_pins_to_statei+0x4e>
 1fa:	22 0f       	add	r18, r18
 1fc:	33 1f       	adc	r19, r19
 1fe:	8a 95       	dec	r24
 200:	e2 f7       	brpl	.-8      	; 0x1fa <_Z23relay_all_pins_to_statei+0x4a>
 202:	82 2f       	mov	r24, r18
 204:	80 95       	com	r24
 206:	89 23       	and	r24, r25
 208:	8b b9       	out	0x0b, r24	; 11
		}
		for (i = 0; i < RELAY_PINS_DDRB_COUNT; i++) {
			PORTB |= (1 << RELAY_PINS_DDRB[i]);
		}		
	} else {
		for (i = 0; i < RELAY_PINS_DDRD_COUNT; i++) {
 20a:	e6 17       	cp	r30, r22
 20c:	f7 07       	cpc	r31, r23
 20e:	81 f7       	brne	.-32     	; 0x1f0 <_Z23relay_all_pins_to_statei+0x40>
			PORTD &= ~(1 << RELAY_PINS_DDRD[i]);
		}
		for (i = 0; i < RELAY_PINS_DDRB_COUNT; i++) {
			PORTB &= ~(1 << RELAY_PINS_DDRB[i]);
 210:	2e 98       	cbi	0x05, 6	; 5
 212:	2f 98       	cbi	0x05, 7	; 5
 214:	08 95       	ret

00000216 <_Z12relay_switchhh>:
		}		
	}	
}

void relay_switch(uint8_t state, uint8_t relay_id)
{
 216:	cf 93       	push	r28
 218:	c6 2f       	mov	r28, r22
	if(state){
 21a:	88 23       	and	r24, r24
 21c:	91 f1       	breq	.+100    	; 0x282 <_Z12relay_switchhh+0x6c>
		relay_all_pins_to_state(0);
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	c6 df       	rcall	.-116    	; 0x1b0 <_Z23relay_all_pins_to_statei>
		*relay_pins[relay_id].port |= (1 << relay_pins[relay_id].pin);
 224:	ec 2f       	mov	r30, r28
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	ee 0f       	add	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	ee 0f       	add	r30, r30
 22e:	ff 1f       	adc	r31, r31
 230:	ea 5b       	subi	r30, 0xBA	; 186
 232:	fe 4f       	sbci	r31, 0xFE	; 254
 234:	a0 81       	ld	r26, Z
 236:	b1 81       	ldd	r27, Z+1	; 0x01
 238:	4c 91       	ld	r20, X
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	9c 01       	movw	r18, r24
 240:	02 80       	ldd	r0, Z+2	; 0x02
 242:	02 c0       	rjmp	.+4      	; 0x248 <_Z12relay_switchhh+0x32>
 244:	22 0f       	add	r18, r18
 246:	33 1f       	adc	r19, r19
 248:	0a 94       	dec	r0
 24a:	e2 f7       	brpl	.-8      	; 0x244 <_Z12relay_switchhh+0x2e>
 24c:	24 2b       	or	r18, r20
 24e:	2c 93       	st	X, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	af e5       	ldi	r26, 0x5F	; 95
 252:	ba ee       	ldi	r27, 0xEA	; 234
 254:	11 97       	sbiw	r26, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <_Z12relay_switchhh+0x3e>
 258:	00 c0       	rjmp	.+0      	; 0x25a <_Z12relay_switchhh+0x44>
 25a:	00 00       	nop
		_delay_ms(30);
		*relay_pins[relay_id].port &= ~(1 <<relay_pins[relay_id].pin);
 25c:	a0 81       	ld	r26, Z
 25e:	b1 81       	ldd	r27, Z+1	; 0x01
 260:	2c 91       	ld	r18, X
 262:	02 80       	ldd	r0, Z+2	; 0x02
 264:	02 c0       	rjmp	.+4      	; 0x26a <_Z12relay_switchhh+0x54>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	0a 94       	dec	r0
 26c:	e2 f7       	brpl	.-8      	; 0x266 <_Z12relay_switchhh+0x50>
 26e:	80 95       	com	r24
 270:	82 23       	and	r24, r18
 272:	8c 93       	st	X, r24
 274:	8f e5       	ldi	r24, 0x5F	; 95
 276:	9a ee       	ldi	r25, 0xEA	; 234
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <_Z12relay_switchhh+0x62>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <_Z12relay_switchhh+0x68>
 27e:	00 00       	nop
 280:	32 c0       	rjmp	.+100    	; 0x2e6 <_Z12relay_switchhh+0xd0>
		_delay_ms(30);
	} else {
		relay_all_pins_to_state(1);
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	94 df       	rcall	.-216    	; 0x1b0 <_Z23relay_all_pins_to_statei>
		*relay_pins[relay_id].port &= ~(1 << relay_pins[relay_id].pin);
 288:	ec 2f       	mov	r30, r28
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	ee 0f       	add	r30, r30
 28e:	ff 1f       	adc	r31, r31
 290:	ee 0f       	add	r30, r30
 292:	ff 1f       	adc	r31, r31
 294:	ea 5b       	subi	r30, 0xBA	; 186
 296:	fe 4f       	sbci	r31, 0xFE	; 254
 298:	a0 81       	ld	r26, Z
 29a:	b1 81       	ldd	r27, Z+1	; 0x01
 29c:	3c 91       	ld	r19, X
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	ac 01       	movw	r20, r24
 2a4:	02 80       	ldd	r0, Z+2	; 0x02
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <_Z12relay_switchhh+0x96>
 2a8:	44 0f       	add	r20, r20
 2aa:	55 1f       	adc	r21, r21
 2ac:	0a 94       	dec	r0
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <_Z12relay_switchhh+0x92>
 2b0:	24 2f       	mov	r18, r20
 2b2:	20 95       	com	r18
 2b4:	23 23       	and	r18, r19
 2b6:	2c 93       	st	X, r18
 2b8:	af e5       	ldi	r26, 0x5F	; 95
 2ba:	ba ee       	ldi	r27, 0xEA	; 234
 2bc:	11 97       	sbiw	r26, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <_Z12relay_switchhh+0xa6>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <_Z12relay_switchhh+0xac>
 2c2:	00 00       	nop
		_delay_ms(30);
		*relay_pins[relay_id].port |= (1 << relay_pins[relay_id].pin);
 2c4:	a0 81       	ld	r26, Z
 2c6:	b1 81       	ldd	r27, Z+1	; 0x01
 2c8:	2c 91       	ld	r18, X
 2ca:	02 80       	ldd	r0, Z+2	; 0x02
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <_Z12relay_switchhh+0xbc>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	0a 94       	dec	r0
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <_Z12relay_switchhh+0xb8>
 2d6:	82 2b       	or	r24, r18
 2d8:	8c 93       	st	X, r24
 2da:	8f e5       	ldi	r24, 0x5F	; 95
 2dc:	9a ee       	ldi	r25, 0xEA	; 234
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <_Z12relay_switchhh+0xc8>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <_Z12relay_switchhh+0xce>
 2e4:	00 00       	nop
		_delay_ms(30);
	}
}
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <_Z18optocoupler_switchhh>:

void optocoupler_switch(uint8_t state, uint8_t optocoupler_id)
{
	if(state){
 2ea:	88 23       	and	r24, r24
 2ec:	b1 f0       	breq	.+44     	; 0x31a <_Z18optocoupler_switchhh+0x30>
		*opto_pins[optocoupler_id].port |= (1 << opto_pins[optocoupler_id].pin);
 2ee:	e6 2f       	mov	r30, r22
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	ee 0f       	add	r30, r30
 2f4:	ff 1f       	adc	r31, r31
 2f6:	ee 0f       	add	r30, r30
 2f8:	ff 1f       	adc	r31, r31
 2fa:	e6 5e       	subi	r30, 0xE6	; 230
 2fc:	fe 4f       	sbci	r31, 0xFE	; 254
 2fe:	a0 81       	ld	r26, Z
 300:	b1 81       	ldd	r27, Z+1	; 0x01
 302:	2c 91       	ld	r18, X
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 80       	ldd	r0, Z+2	; 0x02
 30a:	02 c0       	rjmp	.+4      	; 0x310 <_Z18optocoupler_switchhh+0x26>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	0a 94       	dec	r0
 312:	e2 f7       	brpl	.-8      	; 0x30c <_Z18optocoupler_switchhh+0x22>
 314:	82 2b       	or	r24, r18
 316:	8c 93       	st	X, r24
 318:	08 95       	ret
	} else {
		*opto_pins[optocoupler_id].port &= ~(1 << opto_pins[optocoupler_id].pin);
 31a:	e6 2f       	mov	r30, r22
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	ee 0f       	add	r30, r30
 320:	ff 1f       	adc	r31, r31
 322:	ee 0f       	add	r30, r30
 324:	ff 1f       	adc	r31, r31
 326:	e6 5e       	subi	r30, 0xE6	; 230
 328:	fe 4f       	sbci	r31, 0xFE	; 254
 32a:	a0 81       	ld	r26, Z
 32c:	b1 81       	ldd	r27, Z+1	; 0x01
 32e:	2c 91       	ld	r18, X
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 80       	ldd	r0, Z+2	; 0x02
 336:	02 c0       	rjmp	.+4      	; 0x33c <_Z18optocoupler_switchhh+0x52>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	0a 94       	dec	r0
 33e:	e2 f7       	brpl	.-8      	; 0x338 <_Z18optocoupler_switchhh+0x4e>
 340:	80 95       	com	r24
 342:	82 23       	and	r24, r18
 344:	8c 93       	st	X, r24
 346:	08 95       	ret

00000348 <_Z17optocouplers_initv>:
	}
}

void optocouplers_init()
{
	opto_pins[OPTOCOUPLER_EQ_ID].pin = OPTO_EQ_PIN;
 348:	ea e1       	ldi	r30, 0x1A	; 26
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	85 e0       	ldi	r24, 0x05	; 5
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	93 83       	std	Z+3, r25	; 0x03
 352:	82 83       	std	Z+2, r24	; 0x02
	opto_pins[OPTOCOUPLER_EQ_ID].port = &PORTB;
 354:	25 e2       	ldi	r18, 0x25	; 37
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	31 83       	std	Z+1, r19	; 0x01
 35a:	20 83       	st	Z, r18
	DDRB |= (1 << OPTO_EQ_PIN);
 35c:	25 9a       	sbi	0x04, 5	; 4

	opto_pins[OPTOCOUPLER_NR_ID].pin = OPTO_NR_PIN;
 35e:	17 82       	std	Z+7, r1	; 0x07
 360:	16 82       	std	Z+6, r1	; 0x06
	opto_pins[OPTOCOUPLER_NR_ID].port = &PORTC;
 362:	88 e2       	ldi	r24, 0x28	; 40
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	95 83       	std	Z+5, r25	; 0x05
 368:	84 83       	std	Z+4, r24	; 0x04
	DDRC |= (1 << OPTO_NR_PIN);
 36a:	38 9a       	sbi	0x07, 0	; 7
	
	opto_pins[OPTOCOUPLER_GEN_ID].pin = OPTO_GEN_PIN;
 36c:	a1 e0       	ldi	r26, 0x01	; 1
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	b3 87       	std	Z+11, r27	; 0x0b
 372:	a2 87       	std	Z+10, r26	; 0x0a
	opto_pins[OPTOCOUPLER_GEN_ID].port = &PORTC;
 374:	91 87       	std	Z+9, r25	; 0x09
 376:	80 87       	std	Z+8, r24	; 0x08
	DDRC |= (1 << OPTO_GEN_PIN);
 378:	39 9a       	sbi	0x07, 1	; 7
	
	opto_pins[OPTOCOUPLER_UZ1_ID].pin = OPTO_UZ1_PIN;
 37a:	42 e0       	ldi	r20, 0x02	; 2
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	57 87       	std	Z+15, r21	; 0x0f
 380:	46 87       	std	Z+14, r20	; 0x0e
	opto_pins[OPTOCOUPLER_UZ1_ID].port = &PORTC;
 382:	95 87       	std	Z+13, r25	; 0x0d
 384:	84 87       	std	Z+12, r24	; 0x0c
	DDRC |= (1 << OPTO_UZ1_PIN);
 386:	3a 9a       	sbi	0x07, 2	; 7

	opto_pins[OPTOCOUPLER_UZ0_ID].pin = OPTO_UZ0_PIN;
 388:	63 e0       	ldi	r22, 0x03	; 3
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	73 8b       	std	Z+19, r23	; 0x13
 38e:	62 8b       	std	Z+18, r22	; 0x12
	opto_pins[OPTOCOUPLER_UZ0_ID].port = &PORTC;
 390:	91 8b       	std	Z+17, r25	; 0x11
 392:	80 8b       	std	Z+16, r24	; 0x10
	DDRC |= (1 << OPTO_UZ0_PIN);
 394:	3b 9a       	sbi	0x07, 3	; 7
	
	opto_pins[OPTOCOUPLER_SADP0_ID].pin = OPTO_SADP0_PIN;
 396:	17 8a       	std	Z+23, r1	; 0x17
 398:	16 8a       	std	Z+22, r1	; 0x16
	opto_pins[OPTOCOUPLER_SADP0_ID].port = &PORTB;
 39a:	35 8b       	std	Z+21, r19	; 0x15
 39c:	24 8b       	std	Z+20, r18	; 0x14
	DDRB |= (1 << OPTO_SADP0_PIN);
 39e:	20 9a       	sbi	0x04, 0	; 4
	
	opto_pins[OPTOCOUPLER_SADP1_ID].pin = OPTO_SADP1_PIN;
 3a0:	b3 8f       	std	Z+27, r27	; 0x1b
 3a2:	a2 8f       	std	Z+26, r26	; 0x1a
	opto_pins[OPTOCOUPLER_SADP1_ID].port = &PORTB;
 3a4:	31 8f       	std	Z+25, r19	; 0x19
 3a6:	20 8f       	std	Z+24, r18	; 0x18
	DDRB |= (1 << OPTO_SADP1_PIN);
 3a8:	21 9a       	sbi	0x04, 1	; 4
		
	opto_pins[OPTOCOUPLER_SADP2_ID].pin = OPTO_SADP2_PIN;
 3aa:	57 8f       	std	Z+31, r21	; 0x1f
 3ac:	46 8f       	std	Z+30, r20	; 0x1e
	opto_pins[OPTOCOUPLER_SADP2_ID].port = &PORTB;
 3ae:	35 8f       	std	Z+29, r19	; 0x1d
 3b0:	24 8f       	std	Z+28, r18	; 0x1c
	DDRB |= (1 << OPTO_SADP2_PIN);
 3b2:	22 9a       	sbi	0x04, 2	; 4
			
	opto_pins[OPTOCOUPLER_SADP3_ID].pin = OPTO_SADP3_PIN;
 3b4:	73 a3       	std	Z+35, r23	; 0x23
 3b6:	62 a3       	std	Z+34, r22	; 0x22
	opto_pins[OPTOCOUPLER_SADP3_ID].port = &PORTB;
 3b8:	31 a3       	std	Z+33, r19	; 0x21
 3ba:	20 a3       	std	Z+32, r18	; 0x20
	DDRB |= (1 << OPTO_SADP3_PIN);
 3bc:	23 9a       	sbi	0x04, 3	; 4
	
	opto_pins[OPTOCOUPLER_UZ0_ID].pin = OPTO_UZ0_PIN;
	opto_pins[OPTOCOUPLER_UZ0_ID].port = &PORTC;
	DDRC |= (1 << OPTO_UZ0_PIN);
 3be:	3b 9a       	sbi	0x07, 3	; 7
	
	opto_pins[OPTOCOUPLER_UZ1_ID].pin = OPTO_UZ1_PIN;
	opto_pins[OPTOCOUPLER_UZ1_ID].port = &PORTC;
	DDRC |= (1 << OPTO_UZ1_PIN);	
 3c0:	3a 9a       	sbi	0x07, 2	; 7
 3c2:	08 95       	ret

000003c4 <_Z11relays_initv>:
}

void relays_init()
{
	relay_pins[RELAY_GEN_ID].pin = RELAY_GEN_PIN;
 3c4:	e6 e4       	ldi	r30, 0x46	; 70
 3c6:	f1 e0       	ldi	r31, 0x01	; 1
 3c8:	83 e0       	ldi	r24, 0x03	; 3
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	93 83       	std	Z+3, r25	; 0x03
 3ce:	82 83       	std	Z+2, r24	; 0x02
	relay_pins[RELAY_GEN_ID].port = &PORTD;
 3d0:	8b e2       	ldi	r24, 0x2B	; 43
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	91 83       	std	Z+1, r25	; 0x01
 3d6:	80 83       	st	Z, r24
	DDRD |= (1 << RELAY_GEN_PIN);
 3d8:	53 9a       	sbi	0x0a, 3	; 10
	
	relay_pins[RELAY_FIX_REC_ID].pin = RELAY_FIX_REC_PIN;
 3da:	24 e0       	ldi	r18, 0x04	; 4
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	37 83       	std	Z+7, r19	; 0x07
 3e0:	26 83       	std	Z+6, r18	; 0x06
	relay_pins[RELAY_FIX_REC_ID].port = &PORTD;
 3e2:	95 83       	std	Z+5, r25	; 0x05
 3e4:	84 83       	std	Z+4, r24	; 0x04
	DDRD |= (1 << RELAY_FIX_REC_PIN);
 3e6:	54 9a       	sbi	0x0a, 4	; 10
	
	relay_pins[RELAY_KONTR_ID].pin = RELAY_KONTR_PIN;
 3e8:	25 e0       	ldi	r18, 0x05	; 5
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	33 87       	std	Z+11, r19	; 0x0b
 3ee:	22 87       	std	Z+10, r18	; 0x0a
	relay_pins[RELAY_KONTR_ID].port = &PORTD;
 3f0:	91 87       	std	Z+9, r25	; 0x09
 3f2:	80 87       	std	Z+8, r24	; 0x08
	DDRD |= (1 << RELAY_KONTR_PIN);
 3f4:	55 9a       	sbi	0x0a, 5	; 10
	
	relay_pins[RELAY_EQ_ID].pin = RELAY_EQ_PIN;
 3f6:	46 e0       	ldi	r20, 0x06	; 6
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	57 87       	std	Z+15, r21	; 0x0f
 3fc:	46 87       	std	Z+14, r20	; 0x0e
	relay_pins[RELAY_EQ_ID].port = &PORTD;
 3fe:	95 87       	std	Z+13, r25	; 0x0d
 400:	84 87       	std	Z+12, r24	; 0x0c
	DDRD |= (1 << RELAY_EQ_PIN);
 402:	56 9a       	sbi	0x0a, 6	; 10
	
	relay_pins[RELAY_GSP_ID].pin = RELAY_GSP_PIN;
 404:	27 e0       	ldi	r18, 0x07	; 7
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	33 8b       	std	Z+19, r19	; 0x13
 40a:	22 8b       	std	Z+18, r18	; 0x12
	relay_pins[RELAY_GSP_ID].port = &PORTD;
 40c:	91 8b       	std	Z+17, r25	; 0x11
 40e:	80 8b       	std	Z+16, r24	; 0x10
	DDRD |= (1 << RELAY_GSP_PIN);
 410:	57 9a       	sbi	0x0a, 7	; 10
	
	relay_pins[RELAY_LINE_ID].pin = RELAY_LINE_PIN;
 412:	57 8b       	std	Z+23, r21	; 0x17
 414:	46 8b       	std	Z+22, r20	; 0x16
	relay_pins[RELAY_LINE_ID].port = &PORTB;
 416:	85 e2       	ldi	r24, 0x25	; 37
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	95 8b       	std	Z+21, r25	; 0x15
 41c:	84 8b       	std	Z+20, r24	; 0x14
	DDRB |= (1 << RELAY_LINE_PIN);
 41e:	26 9a       	sbi	0x04, 6	; 4

	relay_pins[RELAY_REC_ID].pin = RELAY_REC_PIN;
 420:	33 8f       	std	Z+27, r19	; 0x1b
 422:	22 8f       	std	Z+26, r18	; 0x1a
	relay_pins[RELAY_REC_ID].port = &PORTB;
 424:	91 8f       	std	Z+25, r25	; 0x19
 426:	80 8f       	std	Z+24, r24	; 0x18
	DDRB |= (1 << RELAY_REC_PIN);
 428:	27 9a       	sbi	0x04, 7	; 4
 42a:	08 95       	ret

0000042c <_Z8set_modeh>:
		
}

void set_mode(uint8_t mode)
{
 42c:	cf 93       	push	r28
 42e:	c8 2f       	mov	r28, r24
	if (mode != REC_MODE_PLAY && mode != REC_MODE) {
 430:	89 30       	cpi	r24, 0x09	; 9
 432:	89 f0       	breq	.+34     	; 0x456 <_Z8set_modeh+0x2a>
 434:	88 23       	and	r24, r24
 436:	09 f4       	brne	.+2      	; 0x43a <_Z8set_modeh+0xe>
 438:	44 c0       	rjmp	.+136    	; 0x4c2 <_Z8set_modeh+0x96>
		relay_switch(LINE_STATE_OFF, RELAY_LINE_ID);
 43a:	65 e0       	ldi	r22, 0x05	; 5
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	eb de       	rcall	.-554    	; 0x216 <_Z12relay_switchhh>
	}
	
	if (mode != REC_MODE && mode != REC_MODE_GEN && mode != REC_MODE_PLAY) {
 440:	88 ef       	ldi	r24, 0xF8	; 248
 442:	8c 0f       	add	r24, r28
 444:	82 30       	cpi	r24, 0x02	; 2
 446:	38 f0       	brcs	.+14     	; 0x456 <_Z8set_modeh+0x2a>
		relay_switch(GSP_STATE_OFF, RELAY_GSP_ID);
 448:	64 e0       	ldi	r22, 0x04	; 4
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	e4 de       	rcall	.-568    	; 0x216 <_Z12relay_switchhh>
		relay_switch(REC_STATE_OFF, RELAY_REC_ID);
 44e:	66 e0       	ldi	r22, 0x06	; 6
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	e1 de       	rcall	.-574    	; 0x216 <_Z12relay_switchhh>
 454:	36 c0       	rjmp	.+108    	; 0x4c2 <_Z8set_modeh+0x96>
	if (mode != REC_MODE_GEN && mode != REC_MODE_PLAY) {
		relay_switch(GEN_STATE_OFF, RELAY_GEN_ID);
		optocoupler_switch(0, OPTOCOUPLER_GEN_ID);
	}

	switch (mode) {
 456:	c1 30       	cpi	r28, 0x01	; 1
 458:	11 f1       	breq	.+68     	; 0x49e <_Z8set_modeh+0x72>
 45a:	28 f0       	brcs	.+10     	; 0x466 <_Z8set_modeh+0x3a>
 45c:	c8 30       	cpi	r28, 0x08	; 8
 45e:	79 f0       	breq	.+30     	; 0x47e <_Z8set_modeh+0x52>
 460:	c9 30       	cpi	r28, 0x09	; 9
 462:	61 f5       	brne	.+88     	; 0x4bc <_Z8set_modeh+0x90>
 464:	1c c0       	rjmp	.+56     	; 0x49e <_Z8set_modeh+0x72>
		case REC_MODE:
			relay_switch(GSP_STATE_ON, RELAY_GSP_ID);
 466:	64 e0       	ldi	r22, 0x04	; 4
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	d5 de       	rcall	.-598    	; 0x216 <_Z12relay_switchhh>
			relay_switch(REC_STATE_ON, RELAY_REC_ID);
 46c:	66 e0       	ldi	r22, 0x06	; 6
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	d2 de       	rcall	.-604    	; 0x216 <_Z12relay_switchhh>
			relay_switch(LINE_STATE_ON, RELAY_LINE_ID);
 472:	65 e0       	ldi	r22, 0x05	; 5
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	cf de       	rcall	.-610    	; 0x216 <_Z12relay_switchhh>
			current_mode = mode;
 478:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <current_mode>
		break;	
 47c:	29 c0       	rjmp	.+82     	; 0x4d0 <_Z8set_modeh+0xa4>
		case REC_MODE_GEN:
			optocoupler_switch(1, OPTOCOUPLER_GEN_ID);
 47e:	62 e0       	ldi	r22, 0x02	; 2
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	33 df       	rcall	.-410    	; 0x2ea <_Z18optocoupler_switchhh>
			relay_switch(GSP_STATE_ON, RELAY_GSP_ID);
 484:	64 e0       	ldi	r22, 0x04	; 4
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	c6 de       	rcall	.-628    	; 0x216 <_Z12relay_switchhh>
			relay_switch(REC_STATE_ON, RELAY_REC_ID);
 48a:	66 e0       	ldi	r22, 0x06	; 6
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	c3 de       	rcall	.-634    	; 0x216 <_Z12relay_switchhh>
			relay_switch(GEN_STATE_ON, RELAY_GEN_ID);
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	c0 de       	rcall	.-640    	; 0x216 <_Z12relay_switchhh>
			current_mode = mode;
 496:	88 e0       	ldi	r24, 0x08	; 8
 498:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <current_mode>
		break;			
 49c:	19 c0       	rjmp	.+50     	; 0x4d0 <_Z8set_modeh+0xa4>
		case PLAY_MODE:
		case REC_MODE_PLAY:	
			mute_delay = 1;
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	a0 e0       	ldi	r26, 0x00	; 0
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <mute_delay>
 4aa:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <mute_delay+0x1>
 4ae:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <mute_delay+0x2>
 4b2:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <mute_delay+0x3>
			current_mode = mode;
 4b6:	c0 93 03 01 	sts	0x0103, r28	; 0x800103 <current_mode>
			break;
 4ba:	0a c0       	rjmp	.+20     	; 0x4d0 <_Z8set_modeh+0xa4>
		default:
			current_mode = mode;
 4bc:	c0 93 03 01 	sts	0x0103, r28	; 0x800103 <current_mode>
		break;
	}
}
 4c0:	07 c0       	rjmp	.+14     	; 0x4d0 <_Z8set_modeh+0xa4>
		relay_switch(REC_STATE_OFF, RELAY_REC_ID);
		//relay_switch(FIX_STATE_OFF, RELAY_FIX_REC_ID);
	}
	
	if (mode != REC_MODE_GEN && mode != REC_MODE_PLAY) {
		relay_switch(GEN_STATE_OFF, RELAY_GEN_ID);
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	a7 de       	rcall	.-690    	; 0x216 <_Z12relay_switchhh>
		optocoupler_switch(0, OPTOCOUPLER_GEN_ID);
 4c8:	62 e0       	ldi	r22, 0x02	; 2
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e df       	rcall	.-484    	; 0x2ea <_Z18optocoupler_switchhh>
 4ce:	c3 cf       	rjmp	.-122    	; 0x456 <_Z8set_modeh+0x2a>
			break;
		default:
			current_mode = mode;
		break;
	}
}
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

000004d4 <_Z10set_optioncc>:

void set_option(char option_, char value_)
{
 4d4:	cf 93       	push	r28
	switch (option_) {
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	88 30       	cpi	r24, 0x08	; 8
 4da:	91 05       	cpc	r25, r1
 4dc:	08 f0       	brcs	.+2      	; 0x4e0 <_Z10set_optioncc+0xc>
 4de:	48 c0       	rjmp	.+144    	; 0x570 <__stack+0x71>
 4e0:	c6 2f       	mov	r28, r22
 4e2:	fc 01       	movw	r30, r24
 4e4:	e6 5e       	subi	r30, 0xE6	; 230
 4e6:	ff 4f       	sbci	r31, 0xFF	; 255
 4e8:	09 94       	ijmp
		case NR_OPTION:
			optocoupler_switch(value_, OPTOCOUPLER_NR_ID);
 4ea:	61 e0       	ldi	r22, 0x01	; 1
 4ec:	8c 2f       	mov	r24, r28
 4ee:	fd de       	rcall	.-518    	; 0x2ea <_Z18optocoupler_switchhh>
		break;
 4f0:	3f c0       	rjmp	.+126    	; 0x570 <__stack+0x71>
		
		case EQ_OPTION:
			if (value_ == 0) {
 4f2:	61 11       	cpse	r22, r1
 4f4:	04 c0       	rjmp	.+8      	; 0x4fe <_Z10set_optioncc+0x2a>
				relay_switch(EQ_STATE_OFF, RELAY_EQ_ID);
 4f6:	63 e0       	ldi	r22, 0x03	; 3
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	8d de       	rcall	.-742    	; 0x216 <_Z12relay_switchhh>
 4fc:	39 c0       	rjmp	.+114    	; 0x570 <__stack+0x71>
			} else if(value_ == 1) {
 4fe:	61 30       	cpi	r22, 0x01	; 1
 500:	39 f4       	brne	.+14     	; 0x510 <__stack+0x11>
				relay_switch(EQ_STATE_ON, RELAY_EQ_ID);
 502:	63 e0       	ldi	r22, 0x03	; 3
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	87 de       	rcall	.-754    	; 0x216 <_Z12relay_switchhh>
				optocoupler_switch(EQ_STATE_OFF, OPTOCOUPLER_EQ_ID);
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	ee de       	rcall	.-548    	; 0x2ea <_Z18optocoupler_switchhh>
 50e:	30 c0       	rjmp	.+96     	; 0x570 <__stack+0x71>
			} else if(value_ == 2) {
 510:	62 30       	cpi	r22, 0x02	; 2
 512:	71 f5       	brne	.+92     	; 0x570 <__stack+0x71>
				relay_switch(EQ_STATE_ON, RELAY_EQ_ID);
 514:	63 e0       	ldi	r22, 0x03	; 3
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	7e de       	rcall	.-772    	; 0x216 <_Z12relay_switchhh>
				optocoupler_switch(EQ_STATE_ON, OPTOCOUPLER_EQ_ID);
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	e5 de       	rcall	.-566    	; 0x2ea <_Z18optocoupler_switchhh>
 520:	27 c0       	rjmp	.+78     	; 0x570 <__stack+0x71>
			}
		break;
		
		case KONTR_OPTION:
			relay_switch(value_, RELAY_KONTR_ID);
 522:	62 e0       	ldi	r22, 0x02	; 2
 524:	8c 2f       	mov	r24, r28
 526:	77 de       	rcall	.-786    	; 0x216 <_Z12relay_switchhh>
			//current_kontr_option = value_;
		break;
 528:	23 c0       	rjmp	.+70     	; 0x570 <__stack+0x71>
			//relay_switch(!value_, RELAY_GEN_ID);
			//optocoupler_switch(value_, OPTOCOUPLER_GEN_ID);
		break;
		
		case SADP_OPTION:
			optocoupler_switch(value_ & (1<<3), OPTOCOUPLER_SADP0_ID);
 52a:	65 e0       	ldi	r22, 0x05	; 5
 52c:	8c 2f       	mov	r24, r28
 52e:	88 70       	andi	r24, 0x08	; 8
 530:	dc de       	rcall	.-584    	; 0x2ea <_Z18optocoupler_switchhh>
			optocoupler_switch(value_ & (1<<2), OPTOCOUPLER_SADP1_ID);
 532:	66 e0       	ldi	r22, 0x06	; 6
 534:	8c 2f       	mov	r24, r28
 536:	84 70       	andi	r24, 0x04	; 4
 538:	d8 de       	rcall	.-592    	; 0x2ea <_Z18optocoupler_switchhh>
			optocoupler_switch(value_ & (1<<0), OPTOCOUPLER_SADP2_ID);
 53a:	67 e0       	ldi	r22, 0x07	; 7
 53c:	8c 2f       	mov	r24, r28
 53e:	81 70       	andi	r24, 0x01	; 1
 540:	d4 de       	rcall	.-600    	; 0x2ea <_Z18optocoupler_switchhh>
			optocoupler_switch(value_ & (1<<1), OPTOCOUPLER_SADP3_ID);
 542:	68 e0       	ldi	r22, 0x08	; 8
 544:	8c 2f       	mov	r24, r28
 546:	82 70       	andi	r24, 0x02	; 2
 548:	d0 de       	rcall	.-608    	; 0x2ea <_Z18optocoupler_switchhh>
		break;
 54a:	12 c0       	rjmp	.+36     	; 0x570 <__stack+0x71>
		
		case UZ_EQ_OPTION:
			optocoupler_switch(value_ & (1<<0), OPTOCOUPLER_UZ0_ID);
 54c:	64 e0       	ldi	r22, 0x04	; 4
 54e:	8c 2f       	mov	r24, r28
 550:	81 70       	andi	r24, 0x01	; 1
 552:	cb de       	rcall	.-618    	; 0x2ea <_Z18optocoupler_switchhh>
			optocoupler_switch(value_ & (1<<1), OPTOCOUPLER_UZ1_ID);
 554:	63 e0       	ldi	r22, 0x03	; 3
 556:	8c 2f       	mov	r24, r28
 558:	82 70       	andi	r24, 0x02	; 2
 55a:	c7 de       	rcall	.-626    	; 0x2ea <_Z18optocoupler_switchhh>
		break;
 55c:	09 c0       	rjmp	.+18     	; 0x570 <__stack+0x71>
		
		case FIX_LEVEL_OPTION:
			relay_switch(value_, RELAY_FIX_REC_ID);
 55e:	61 e0       	ldi	r22, 0x01	; 1
 560:	8c 2f       	mov	r24, r28
 562:	59 de       	rcall	.-846    	; 0x216 <_Z12relay_switchhh>
		break;
 564:	05 c0       	rjmp	.+10     	; 0x570 <__stack+0x71>
		
		case MUTE_OPTION:
			relay_switch(!value_, RELAY_LINE_ID);
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	61 11       	cpse	r22, r1
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	65 e0       	ldi	r22, 0x05	; 5
 56e:	53 de       	rcall	.-858    	; 0x216 <_Z12relay_switchhh>
		break;
	}
}
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <main>:
 574:	2f ef       	ldi	r18, 0xFF	; 255
 576:	80 e7       	ldi	r24, 0x70	; 112
 578:	92 e0       	ldi	r25, 0x02	; 2
 57a:	21 50       	subi	r18, 0x01	; 1
 57c:	80 40       	sbci	r24, 0x00	; 0
 57e:	90 40       	sbci	r25, 0x00	; 0
 580:	e1 f7       	brne	.-8      	; 0x57a <main+0x6>
 582:	00 c0       	rjmp	.+0      	; 0x584 <main+0x10>
 584:	00 00       	nop


int main(void)
{
	_delay_ms(100);
	m4d_i2c_init_as_slave();
 586:	7a dd       	rcall	.-1292   	; 0x7c <_Z21m4d_i2c_init_as_slavev>

	sei();
 588:	78 94       	sei
	relays_init();
 58a:	1c df       	rcall	.-456    	; 0x3c4 <_Z11relays_initv>
	optocouplers_init();
 58c:	dd de       	rcall	.-582    	; 0x348 <_Z17optocouplers_initv>
	
	relay_all_pins_to_state(0);
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e de       	rcall	.-996    	; 0x1b0 <_Z23relay_all_pins_to_statei>

	set_mode(STOP_MODE);
 594:	82 e0       	ldi	r24, 0x02	; 2
 596:	4a df       	rcall	.-364    	; 0x42c <_Z8set_modeh>
	set_option(GEN_OPTION, 0);
	optocoupler_switch(0, OPTOCOUPLER_GEN_ID);
 598:	62 e0       	ldi	r22, 0x02	; 2
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	a6 de       	rcall	.-692    	; 0x2ea <_Z18optocoupler_switchhh>
	DDRD &= ~(1 << TEST_PD0_PIN);
 59e:	50 98       	cbi	0x0a, 0	; 10
	PORTD |= (1 << TEST_PD0_PIN);
 5a0:	58 9a       	sbi	0x0b, 0	; 11
	
	//DDRD &= ~(1 << TEST_PD1_PIN);
	//PORTD |= (1 << TEST_PD1_PIN);

	relay_switch(LINE_STATE_ON, RELAY_LINE_ID);
 5a2:	65 e0       	ldi	r22, 0x05	; 5
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	37 de       	rcall	.-914    	; 0x216 <_Z12relay_switchhh>
	while (1) {			
		execute_command_timer();
 5a8:	eb dd       	rcall	.-1066   	; 0x180 <_Z21execute_command_timerv>
		
		
		if (mute_delay > 0) {
 5aa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mute_delay>
 5ae:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <mute_delay+0x1>
 5b2:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <mute_delay+0x2>
 5b6:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <mute_delay+0x3>
 5ba:	00 97       	sbiw	r24, 0x00	; 0
 5bc:	a1 05       	cpc	r26, r1
 5be:	b1 05       	cpc	r27, r1
 5c0:	99 f3       	breq	.-26     	; 0x5a8 <main+0x34>
			mute_delay++;
 5c2:	01 96       	adiw	r24, 0x01	; 1
 5c4:	a1 1d       	adc	r26, r1
 5c6:	b1 1d       	adc	r27, r1
 5c8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <mute_delay>
 5cc:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <mute_delay+0x1>
 5d0:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <mute_delay+0x2>
 5d4:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <mute_delay+0x3>
			if (mute_delay == 400000) {
 5d8:	80 38       	cpi	r24, 0x80	; 128
 5da:	9a 41       	sbci	r25, 0x1A	; 26
 5dc:	a6 40       	sbci	r26, 0x06	; 6
 5de:	b1 05       	cpc	r27, r1
 5e0:	19 f7       	brne	.-58     	; 0x5a8 <main+0x34>
				relay_switch(LINE_STATE_ON, RELAY_LINE_ID);
 5e2:	65 e0       	ldi	r22, 0x05	; 5
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	17 de       	rcall	.-978    	; 0x216 <_Z12relay_switchhh>
				mute_delay = 0;
 5e8:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <mute_delay>
 5ec:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <mute_delay+0x1>
 5f0:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <mute_delay+0x2>
 5f4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <mute_delay+0x3>
 5f8:	d7 cf       	rjmp	.-82     	; 0x5a8 <main+0x34>

000005fa <_exit>:
 5fa:	f8 94       	cli

000005fc <__stop_program>:
 5fc:	ff cf       	rjmp	.-2      	; 0x5fc <__stop_program>
