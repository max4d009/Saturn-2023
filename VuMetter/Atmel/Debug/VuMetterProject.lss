
VuMetterProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000008b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000083e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800100  00800100  000008b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000156c  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5a  00000000  00000000  00001f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000afa  00000000  00000000  00002ada  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  000035d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000672  00000000  00000000  000037d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aca  00000000  00000000  00003e46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004910  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	48 c1       	rjmp	.+656    	; 0x2bc <__vector_21>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	2a c0       	rjmp	.+84     	; 0x86 <__vector_24>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a8 32       	cpi	r26, 0x28	; 40
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	23 d2       	rcall	.+1094   	; 0x498 <main>
  52:	f3 c3       	rjmp	.+2022   	; 0x83a <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <EEPROM_write>:
#include "eeprom.h"

void EEPROM_write(uint8_t uiAddress, unsigned char ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE)) //ждем освобождения флага окончания последней операцией с памятью
  56:	f9 99       	sbic	0x1f, 1	; 31
  58:	fe cf       	rjmp	.-4      	; 0x56 <EEPROM_write>
	{}
	EEAR = uiAddress; //Устанавливаем адрес
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	92 bd       	out	0x22, r25	; 34
  5e:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData; //Пишем данные в регистр
  60:	60 bd       	out	0x20, r22	; 32
	EECR |= (1<<EEMPE); //Разрешаем запись
  62:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Пишем байт в память
  64:	f9 9a       	sbi	0x1f, 1	; 31
  66:	08 95       	ret

00000068 <EEPROM_read>:
}

unsigned char EEPROM_read(uint8_t uiAddress)
{
	while(EECR & (1<<EEPE))
  68:	f9 99       	sbic	0x1f, 1	; 31
  6a:	fe cf       	rjmp	.-4      	; 0x68 <EEPROM_read>
	{} //ждем освобождения флага окончания последней операцией с памятью
	EEAR = uiAddress; //Устанавливаем адрес
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	92 bd       	out	0x22, r25	; 34
  70:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Запускаем операцию считывания из памяти в регистр данных
  72:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Возвращаем результат
  74:	80 b5       	in	r24, 0x20	; 32
  76:	08 95       	ret

00000078 <i2c_init_as_slave>:
volatile uint8_t transactProcess = 0;
volatile uint8_t transactCounter = 0;

void i2c_init_as_slave(void)
{
	TWAR = ME_ADDR & 0xFE;
  78:	8e e3       	ldi	r24, 0x3E	; 62
  7a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
	TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT)|(1 << TWIE);/* Enable TWI, Enable ack generation */
  7e:	85 ec       	ldi	r24, 0xC5	; 197
  80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  84:	08 95       	ret

00000086 <__vector_24>:
	//while (!(TWCR & (1<<TWINT)));
}

ISR(TWI_vect)
{
  86:	1f 92       	push	r1
  88:	0f 92       	push	r0
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	0f 92       	push	r0
  8e:	11 24       	eor	r1, r1
  90:	2f 93       	push	r18
  92:	3f 93       	push	r19
  94:	4f 93       	push	r20
  96:	5f 93       	push	r21
  98:	6f 93       	push	r22
  9a:	7f 93       	push	r23
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	af 93       	push	r26
  a2:	bf 93       	push	r27
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	ef 93       	push	r30
  aa:	ff 93       	push	r31
	uint8_t send_count = I2C_DATA_COUNT;
	status = TWSR & 0xF8; 
  ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  b0:	88 7f       	andi	r24, 0xF8	; 248
  b2:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <status>
	
		switch (status)
  b6:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <status>
  ba:	88 3a       	cpi	r24, 0xA8	; 168
  bc:	b9 f1       	breq	.+110    	; 0x12c <__vector_24+0xa6>
  be:	38 f4       	brcc	.+14     	; 0xce <__vector_24+0x48>
  c0:	80 38       	cpi	r24, 0x80	; 128
  c2:	71 f0       	breq	.+28     	; 0xe0 <__vector_24+0x5a>
  c4:	80 3a       	cpi	r24, 0xA0	; 160
  c6:	39 f1       	breq	.+78     	; 0x116 <__vector_24+0x90>
  c8:	81 11       	cpse	r24, r1
  ca:	59 c0       	rjmp	.+178    	; 0x17e <__vector_24+0xf8>
  cc:	54 c0       	rjmp	.+168    	; 0x176 <__vector_24+0xf0>
  ce:	80 3c       	cpi	r24, 0xC0	; 192
  d0:	09 f4       	brne	.+2      	; 0xd4 <__vector_24+0x4e>
  d2:	4d c0       	rjmp	.+154    	; 0x16e <__vector_24+0xe8>
  d4:	88 3c       	cpi	r24, 0xC8	; 200
  d6:	09 f4       	brne	.+2      	; 0xda <__vector_24+0x54>
  d8:	4a c0       	rjmp	.+148    	; 0x16e <__vector_24+0xe8>
  da:	88 3b       	cpi	r24, 0xB8	; 184
  dc:	79 f1       	breq	.+94     	; 0x13c <__vector_24+0xb6>
  de:	4f c0       	rjmp	.+158    	; 0x17e <__vector_24+0xf8>
		{
			case 0x80:;  // Пришли данные от мастера. (До это мы уже приняли свой адрес)
				char data = TWDR;
  e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
				if (transactProcess == 0) {
  e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <transactProcess>
  e8:	91 11       	cpse	r25, r1
  ea:	06 c0       	rjmp	.+12     	; 0xf8 <__vector_24+0x72>
					transactType = data;
  ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <transactType>
					transactProcess = 1;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <transactProcess>
  f6:	0b c0       	rjmp	.+22     	; 0x10e <__vector_24+0x88>
					} else {
					transactData[transactCounter] = data;
  f8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	e3 5e       	subi	r30, 0xE3	; 227
 100:	fe 4f       	sbci	r31, 0xFE	; 254
 102:	80 83       	st	Z, r24
					transactCounter++;
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 108:	8f 5f       	subi	r24, 0xFF	; 255
 10a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
}

static void send_ack()
{
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
 10e:	85 ec       	ldi	r24, 0xC5	; 197
 110:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 114:	37 c0       	rjmp	.+110    	; 0x184 <__vector_24+0xfe>
					transactCounter++;
				}
				send_ack();
			break;
			case 0xA0:;
				transactProcess = 0;
 116:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <transactProcess>
				transactCounter = 0;
 11a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				need_execute = 1;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <need_execute>
		}
}

static void send_ack()
{
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
 124:	85 ec       	ldi	r24, 0xC5	; 197
 126:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 12a:	2c c0       	rjmp	.+88     	; 0x184 <__vector_24+0xfe>
	TWCR =  (1<<TWEN)|(1<<TWIE)|(1<<TWINT);
}

static void update_i2c_data_timer()
{
	i2c_data[I2C_DATA_PEAKS_MODE] = get_peaks_mode();
 12c:	6a d1       	rcall	.+724    	; 0x402 <get_peaks_mode>
 12e:	ca e1       	ldi	r28, 0x1A	; 26
 130:	d1 e0       	ldi	r29, 0x01	; 1
 132:	88 83       	st	Y, r24
	i2c_data[I2C_DATA_PEAKS_TIME] = get_peaks_time();
 134:	72 d1       	rcall	.+740    	; 0x41a <get_peaks_time>
 136:	89 83       	std	Y+1, r24	; 0x01
				send_ack();
				break;
				//--- Status-Codes Slave Transmitter Modus
			case 0xa8: // own slave adress received
				update_i2c_data_timer();
				i2c_data_current = 0;
 138:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <i2c_data_current>
			case 0xb8: // byte was sent and ACK received

				TWDR = i2c_data[i2c_data_current];
 13c:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <i2c_data_current>
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	e6 5e       	subi	r30, 0xE6	; 230
 144:	fe 4f       	sbci	r31, 0xFE	; 254
 146:	80 81       	ld	r24, Z
 148:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
				i2c_data_current++;
 14c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <i2c_data_current>
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <i2c_data_current>
				if (i2c_data_current == send_count) {
 156:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <i2c_data_current>
 15a:	82 30       	cpi	r24, 0x02	; 2
 15c:	21 f4       	brne	.+8      	; 0x166 <__vector_24+0xe0>
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
}

static void send_n_ack()
{
	TWCR =  (1<<TWEN)|(1<<TWIE)|(1<<TWINT);
 15e:	85 e8       	ldi	r24, 0x85	; 133
 160:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 164:	0f c0       	rjmp	.+30     	; 0x184 <__vector_24+0xfe>
		}
}

static void send_ack()
{
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
 166:	85 ec       	ldi	r24, 0xC5	; 197
 168:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 16c:	0b c0       	rjmp	.+22     	; 0x184 <__vector_24+0xfe>
 16e:	85 ec       	ldi	r24, 0xC5	; 197
 170:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 174:	07 c0       	rjmp	.+14     	; 0x184 <__vector_24+0xfe>
			case 0xc8:
				//TWCR = 0xc5; // set TWEA
				send_ack();
			break;
				case 0x00: // BUS-Error
				TWCR = 0xd5;
 176:	85 ed       	ldi	r24, 0xD5	; 213
 178:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			break;
 17c:	03 c0       	rjmp	.+6      	; 0x184 <__vector_24+0xfe>
		}
}

static void send_ack()
{
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
 17e:	85 ec       	ldi	r24, 0xC5	; 197
 180:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			break;
			default:
			//send_ack();
			send_ack();
		}
}
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	bf 91       	pop	r27
 18e:	af 91       	pop	r26
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	7f 91       	pop	r23
 196:	6f 91       	pop	r22
 198:	5f 91       	pop	r21
 19a:	4f 91       	pop	r20
 19c:	3f 91       	pop	r19
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <execute_command_timer>:
	i2c_data[I2C_DATA_PEAKS_TIME] = get_peaks_time();
}

uint8_t execute_command_timer()
{
	if (need_execute == 0) {
 1aa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <need_execute>
 1ae:	88 23       	and	r24, r24
 1b0:	09 f1       	breq	.+66     	; 0x1f4 <execute_command_timer+0x4a>
		return 0;
	}
	
	switch (transactType) {
 1b2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <transactType>
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	69 f0       	breq	.+26     	; 0x1d4 <execute_command_timer+0x2a>
 1ba:	18 f4       	brcc	.+6      	; 0x1c2 <execute_command_timer+0x18>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	31 f0       	breq	.+12     	; 0x1cc <execute_command_timer+0x22>
 1c0:	16 c0       	rjmp	.+44     	; 0x1ee <execute_command_timer+0x44>
 1c2:	83 30       	cpi	r24, 0x03	; 3
 1c4:	61 f0       	breq	.+24     	; 0x1de <execute_command_timer+0x34>
 1c6:	84 30       	cpi	r24, 0x04	; 4
 1c8:	71 f0       	breq	.+28     	; 0x1e6 <execute_command_timer+0x3c>
 1ca:	11 c0       	rjmp	.+34     	; 0x1ee <execute_command_timer+0x44>
		case I2C_VU_START_TRANSACTION_PEAKS_MODE:
			set_peaks_mode(transactData[0]);
 1cc:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <transactData>
 1d0:	07 d1       	rcall	.+526    	; 0x3e0 <set_peaks_mode>
		break;
 1d2:	0d c0       	rjmp	.+26     	; 0x1ee <execute_command_timer+0x44>
		case I2C_VU_START_TRANSACTION_PEAKS_MODE_SAVE:
			EEPROM_write(PR_MODE_PEAKS_MODE, transactData[0]);
 1d4:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <transactData>
 1d8:	8a e0       	ldi	r24, 0x0A	; 10
 1da:	3d df       	rcall	.-390    	; 0x56 <EEPROM_write>
		break;
 1dc:	08 c0       	rjmp	.+16     	; 0x1ee <execute_command_timer+0x44>
		case I2C_VU_START_TRANSACTION_PEAKS_TIME:
			set_peaks_time(transactData[0]);
 1de:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <transactData>
 1e2:	12 d1       	rcall	.+548    	; 0x408 <set_peaks_time>
		break;
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <execute_command_timer+0x44>
		case I2C_VU_START_TRANSACTION_PEAKS_TIME_SAVE:
			EEPROM_write(PR_MODE_PEAKS_TIME, transactData[0]);
 1e6:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <transactData>
 1ea:	84 e1       	ldi	r24, 0x14	; 20
 1ec:	34 df       	rcall	.-408    	; 0x56 <EEPROM_write>
		break;		
	}
	
	need_execute = 0;
 1ee:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <need_execute>
	return 1;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
}
 1f4:	08 95       	ret

000001f6 <m4d_adc_reset_result>:
    return adc_result;
}

void m4d_adc_reset_result()
{
	adc_result.keyboard = 0;
 1f6:	e1 e1       	ldi	r30, 0x11	; 17
 1f8:	f1 e0       	ldi	r31, 0x01	; 1
 1fa:	11 82       	std	Z+1, r1	; 0x01
 1fc:	10 82       	st	Z, r1
	adc_result.count_measure = 2;
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	80 87       	std	Z+8, r24	; 0x08
 202:	08 95       	ret

00000204 <m4d_adc_init_8>:
}

// Инициализация АЦП:
void m4d_adc_init_8(void) 
{
    m4d_adc_reset_result();
 204:	f8 df       	rcall	.-16     	; 0x1f6 <m4d_adc_reset_result>
	
	// Включить АЦП
	ADCSRA |= (1 << ADEN);
 206:	ea e7       	ldi	r30, 0x7A	; 122
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	80 68       	ori	r24, 0x80	; 128
 20e:	80 83       	st	Z, r24
	// Частота дискретизации 8
	ADCSRA |= (1 << ADPS0);
 210:	80 81       	ld	r24, Z
 212:	81 60       	ori	r24, 0x01	; 1
 214:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS1);
 216:	80 81       	ld	r24, Z
 218:	82 60       	ori	r24, 0x02	; 2
 21a:	80 83       	st	Z, r24
	ADCSRA &= ~(1 << ADPS2);
 21c:	80 81       	ld	r24, Z
 21e:	8b 7f       	andi	r24, 0xFB	; 251
 220:	80 83       	st	Z, r24
	
	ADMUX |= (1 << REFS0);
 222:	ac e7       	ldi	r26, 0x7C	; 124
 224:	b0 e0       	ldi	r27, 0x00	; 0
 226:	8c 91       	ld	r24, X
 228:	80 64       	ori	r24, 0x40	; 64
 22a:	8c 93       	st	X, r24
	ADMUX |= (1 << REFS1);
 22c:	8c 91       	ld	r24, X
 22e:	80 68       	ori	r24, 0x80	; 128
 230:	8c 93       	st	X, r24
	
	// Разрешить прерывания
	ADCSRA |= (1 << ADIE);
 232:	80 81       	ld	r24, Z
 234:	88 60       	ori	r24, 0x08	; 8
 236:	80 83       	st	Z, r24
 238:	08 95       	ret

0000023a <m4d_adc_read>:

// Считать показания с ADC
uint16_t m4d_adc_read()
{
	// Включаем АЦП
	ADCSRA |= (1 << ADSC);
 23a:	ea e7       	ldi	r30, 0x7A	; 122
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	80 64       	ori	r24, 0x40	; 64
 242:	80 83       	st	Z, r24
	// Производим измерение
	while(ADCSRA & (1 << ADSC));
 244:	80 81       	ld	r24, Z
 246:	86 fd       	sbrc	r24, 6
 248:	fd cf       	rjmp	.-6      	; 0x244 <m4d_adc_read+0xa>
	return ADC;	
 24a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 24e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
 252:	08 95       	ret

00000254 <m4d_adc_get_level>:

uint16_t m4d_adc_get_level(uint8_t channel) 
{
 254:	ef 92       	push	r14
 256:	ff 92       	push	r15
 258:	0f 93       	push	r16
 25a:	1f 93       	push	r17
 25c:	cf 93       	push	r28
	uint16_t result = 0;
	uint16_t tmp;
	uint16_t tmp2 = 0;
	
	if(channel == 0){
 25e:	81 11       	cpse	r24, r1
 260:	06 c0       	rjmp	.+12     	; 0x26e <m4d_adc_get_level+0x1a>
		ADMUX &= ~(1 << MUX0);
 262:	ec e7       	ldi	r30, 0x7C	; 124
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	8e 7f       	andi	r24, 0xFE	; 254
 26a:	80 83       	st	Z, r24
 26c:	1b c0       	rjmp	.+54     	; 0x2a4 <m4d_adc_get_level+0x50>
	} else {
		ADMUX |= (1 << MUX0);
 26e:	ec e7       	ldi	r30, 0x7C	; 124
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	81 60       	ori	r24, 0x01	; 1
 276:	80 83       	st	Z, r24
 278:	15 c0       	rjmp	.+42     	; 0x2a4 <m4d_adc_get_level+0x50>
 27a:	cf 5f       	subi	r28, 0xFF	; 255
	}
	
	for (uint8_t i = 0; i<=2;i++) {
		tmp = m4d_adc_read();
 27c:	de df       	rcall	.-68     	; 0x23a <m4d_adc_read>
		if (i > 0) {
 27e:	c1 30       	cpi	r28, 0x01	; 1
 280:	e1 f3       	breq	.-8      	; 0x27a <m4d_adc_get_level+0x26>
			result = result + tmp;
 282:	e8 0e       	add	r14, r24
 284:	f9 1e       	adc	r15, r25
			tmp2 = tmp2 + 1;
 286:	0f 5f       	subi	r16, 0xFF	; 255
 288:	1f 4f       	sbci	r17, 0xFF	; 255
		ADMUX &= ~(1 << MUX0);
	} else {
		ADMUX |= (1 << MUX0);
	}
	
	for (uint8_t i = 0; i<=2;i++) {
 28a:	c3 30       	cpi	r28, 0x03	; 3
 28c:	b0 f3       	brcs	.-20     	; 0x27a <m4d_adc_get_level+0x26>
		if (i > 0) {
			result = result + tmp;
			tmp2 = tmp2 + 1;
		}
	}
	if (tmp2 == 0) {
 28e:	01 15       	cp	r16, r1
 290:	11 05       	cpc	r17, r1
 292:	29 f0       	breq	.+10     	; 0x29e <m4d_adc_get_level+0x4a>
		return 0;
	}
	result = result / tmp2;
	
	return result;
 294:	c7 01       	movw	r24, r14
 296:	b8 01       	movw	r22, r16
 298:	b0 d2       	rcall	.+1376   	; 0x7fa <__udivmodhi4>
 29a:	cb 01       	movw	r24, r22
 29c:	09 c0       	rjmp	.+18     	; 0x2b0 <m4d_adc_get_level+0x5c>
			result = result + tmp;
			tmp2 = tmp2 + 1;
		}
	}
	if (tmp2 == 0) {
		return 0;
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	06 c0       	rjmp	.+12     	; 0x2b0 <m4d_adc_get_level+0x5c>
	while(ADCSRA & (1 << ADSC));
	return ADC;	
}

uint16_t m4d_adc_get_level(uint8_t channel) 
{
 2a4:	c1 e0       	ldi	r28, 0x01	; 1
 2a6:	00 e0       	ldi	r16, 0x00	; 0
 2a8:	10 e0       	ldi	r17, 0x00	; 0
 2aa:	e1 2c       	mov	r14, r1
 2ac:	f1 2c       	mov	r15, r1
 2ae:	e6 cf       	rjmp	.-52     	; 0x27c <m4d_adc_get_level+0x28>
		return 0;
	}
	result = result / tmp2;
	
	return result;
}
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	ff 90       	pop	r15
 2b8:	ef 90       	pop	r14
 2ba:	08 95       	ret

000002bc <__vector_21>:

ISR(ADC_vect)
{
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	8f 93       	push	r24
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
	ADCSRA &= ~(1 << ADIF);
 2cc:	ea e7       	ldi	r30, 0x7A	; 122
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	8f 7e       	andi	r24, 0xEF	; 239
 2d4:	80 83       	st	Z, r24
 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	8f 91       	pop	r24
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <soft_spi>:
	return -1;
}

static void soft_spi(uint8_t sat1, uint8_t sat2, unsigned char vu)
{
	vu = (vu & 0xF0) >> 4 | (vu & 0x0F) << 4;
 2e6:	42 95       	swap	r20
	vu = (vu & 0xCC) >> 2 | (vu & 0x33) << 2;
 2e8:	24 2f       	mov	r18, r20
 2ea:	2c 7c       	andi	r18, 0xCC	; 204
 2ec:	92 2f       	mov	r25, r18
 2ee:	96 95       	lsr	r25
 2f0:	96 95       	lsr	r25
 2f2:	24 2f       	mov	r18, r20
 2f4:	23 73       	andi	r18, 0x33	; 51
 2f6:	22 0f       	add	r18, r18
 2f8:	22 0f       	add	r18, r18
 2fa:	29 2b       	or	r18, r25
	vu = (vu & 0xAA) >> 1 | (vu & 0x55) << 1;
 2fc:	e2 2f       	mov	r30, r18
 2fe:	ea 7a       	andi	r30, 0xAA	; 170
 300:	9e 2f       	mov	r25, r30
 302:	96 95       	lsr	r25
 304:	e2 2f       	mov	r30, r18
 306:	e5 75       	andi	r30, 0x55	; 85
 308:	ee 0f       	add	r30, r30
 30a:	e9 2b       	or	r30, r25
	
	char k;
	PORT &= ~(1<<E);
 30c:	2c 98       	cbi	0x05, 4	; 5
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
	
	for (k = 0; k < 8; k++) {
		PORT &=~ (1<<CLK);
		_delay_ms(1);
		
		if(vu >> k & 1) {
 312:	f0 e0       	ldi	r31, 0x00	; 0
	
	char k;
	PORT &= ~(1<<E);
	
	for (k = 0; k < 8; k++) {
		PORT &=~ (1<<CLK);
 314:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 316:	a9 ef       	ldi	r26, 0xF9	; 249
 318:	b0 e0       	ldi	r27, 0x00	; 0
 31a:	11 97       	sbiw	r26, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <soft_spi+0x34>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <soft_spi+0x3a>
 320:	00 00       	nop
		_delay_ms(1);
		
		if(vu >> k & 1) {
 322:	af 01       	movw	r20, r30
 324:	02 2e       	mov	r0, r18
 326:	02 c0       	rjmp	.+4      	; 0x32c <soft_spi+0x46>
 328:	55 95       	asr	r21
 32a:	47 95       	ror	r20
 32c:	0a 94       	dec	r0
 32e:	e2 f7       	brpl	.-8      	; 0x328 <soft_spi+0x42>
 330:	40 ff       	sbrs	r20, 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <soft_spi+0x52>
			PORT = PORT | (1<<DS);
 334:	2d 9a       	sbi	0x05, 5	; 5
 336:	01 c0       	rjmp	.+2      	; 0x33a <soft_spi+0x54>
		} else {
			PORT = PORT & ~(1<<DS);
 338:	2d 98       	cbi	0x05, 5	; 5
		}
		PORT|=(1<<CLK);
 33a:	2a 9a       	sbi	0x05, 2	; 5
 33c:	a9 ef       	ldi	r26, 0xF9	; 249
 33e:	b0 e0       	ldi	r27, 0x00	; 0
 340:	11 97       	sbiw	r26, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <soft_spi+0x5a>
 344:	00 c0       	rjmp	.+0      	; 0x346 <soft_spi+0x60>
 346:	00 00       	nop
 348:	2f 5f       	subi	r18, 0xFF	; 255
 34a:	3f 4f       	sbci	r19, 0xFF	; 255
	vu = (vu & 0xAA) >> 1 | (vu & 0x55) << 1;
	
	char k;
	PORT &= ~(1<<E);
	
	for (k = 0; k < 8; k++) {
 34c:	28 30       	cpi	r18, 0x08	; 8
 34e:	31 05       	cpc	r19, r1
 350:	09 f7       	brne	.-62     	; 0x314 <soft_spi+0x2e>
 352:	20 e0       	ldi	r18, 0x00	; 0
 354:	30 e0       	ldi	r19, 0x00	; 0
	
	for (k = 0; k<8; k++) {
		PORT &=~ (1<<CLK);
		_delay_ms(1);
		
		if (sat2 >> k & 1) {
 356:	70 e0       	ldi	r23, 0x00	; 0
		PORT|=(1<<CLK);
		_delay_ms(1);
	}
	
	for (k = 0; k<8; k++) {
		PORT &=~ (1<<CLK);
 358:	2a 98       	cbi	0x05, 2	; 5
 35a:	e9 ef       	ldi	r30, 0xF9	; 249
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	31 97       	sbiw	r30, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <soft_spi+0x78>
 362:	00 c0       	rjmp	.+0      	; 0x364 <soft_spi+0x7e>
 364:	00 00       	nop
		_delay_ms(1);
		
		if (sat2 >> k & 1) {
 366:	ab 01       	movw	r20, r22
 368:	02 2e       	mov	r0, r18
 36a:	02 c0       	rjmp	.+4      	; 0x370 <soft_spi+0x8a>
 36c:	55 95       	asr	r21
 36e:	47 95       	ror	r20
 370:	0a 94       	dec	r0
 372:	e2 f7       	brpl	.-8      	; 0x36c <soft_spi+0x86>
 374:	40 ff       	sbrs	r20, 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <soft_spi+0x96>
			PORT = PORT | (1<<DS);
 378:	2d 9a       	sbi	0x05, 5	; 5
 37a:	01 c0       	rjmp	.+2      	; 0x37e <soft_spi+0x98>
		} else {
			PORT = PORT & ~(1<<DS);
 37c:	2d 98       	cbi	0x05, 5	; 5
		}
		PORT|=(1<<CLK);
 37e:	2a 9a       	sbi	0x05, 2	; 5
 380:	a9 ef       	ldi	r26, 0xF9	; 249
 382:	b0 e0       	ldi	r27, 0x00	; 0
 384:	11 97       	sbiw	r26, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <soft_spi+0x9e>
 388:	00 c0       	rjmp	.+0      	; 0x38a <soft_spi+0xa4>
 38a:	00 00       	nop
 38c:	2f 5f       	subi	r18, 0xFF	; 255
 38e:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		PORT|=(1<<CLK);
		_delay_ms(1);
	}
	
	for (k = 0; k<8; k++) {
 390:	28 30       	cpi	r18, 0x08	; 8
 392:	31 05       	cpc	r19, r1
 394:	09 f7       	brne	.-62     	; 0x358 <soft_spi+0x72>
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
	
	for (k = 0; k < 8; k++) {
		PORT &=~ (1 << CLK);
		_delay_ms(1);
		
		if (sat1 >> k & 1) {
 39a:	90 e0       	ldi	r25, 0x00	; 0
		PORT|=(1<<CLK);
		_delay_ms(1);
	}
	
	for (k = 0; k < 8; k++) {
		PORT &=~ (1 << CLK);
 39c:	2a 98       	cbi	0x05, 2	; 5
 39e:	e9 ef       	ldi	r30, 0xF9	; 249
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	31 97       	sbiw	r30, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <soft_spi+0xbc>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <soft_spi+0xc2>
 3a8:	00 00       	nop
		_delay_ms(1);
		
		if (sat1 >> k & 1) {
 3aa:	ac 01       	movw	r20, r24
 3ac:	02 2e       	mov	r0, r18
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <soft_spi+0xce>
 3b0:	55 95       	asr	r21
 3b2:	47 95       	ror	r20
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <soft_spi+0xca>
 3b8:	40 ff       	sbrs	r20, 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <soft_spi+0xda>
			PORT = PORT | (1 << DS);
 3bc:	2d 9a       	sbi	0x05, 5	; 5
 3be:	01 c0       	rjmp	.+2      	; 0x3c2 <soft_spi+0xdc>
		} else {
			PORT = PORT & ~(1 << DS);
 3c0:	2d 98       	cbi	0x05, 5	; 5
		}
		PORT |= (1 << CLK);
 3c2:	2a 9a       	sbi	0x05, 2	; 5
 3c4:	a9 ef       	ldi	r26, 0xF9	; 249
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	11 97       	sbiw	r26, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <soft_spi+0xe2>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <soft_spi+0xe8>
 3ce:	00 00       	nop
 3d0:	2f 5f       	subi	r18, 0xFF	; 255
 3d2:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		PORT|=(1<<CLK);
		_delay_ms(1);
	}
	
	for (k = 0; k < 8; k++) {
 3d4:	28 30       	cpi	r18, 0x08	; 8
 3d6:	31 05       	cpc	r19, r1
 3d8:	09 f7       	brne	.-62     	; 0x39c <soft_spi+0xb6>
			PORT = PORT & ~(1 << DS);
		}
		PORT |= (1 << CLK);
		_delay_ms(1);
	}
	PORT |= (1<<E);
 3da:	2c 9a       	sbi	0x05, 4	; 5
	PORT &= ~(1<<E);	
 3dc:	2c 98       	cbi	0x05, 4	; 5
 3de:	08 95       	ret

000003e0 <set_peaks_mode>:
static void soft_spi(uint8_t sat1, uint8_t sat2, unsigned char vu);
static void sat_right_text_anim();
static uint16_t get_level_by_channel(uint8_t channel);

void set_peaks_mode(uint8_t mode)
{
 3e0:	cf 93       	push	r28
 3e2:	c8 2f       	mov	r28, r24
	prevDiodLeft = 0;
 3e4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prevDiodLeft>
	prevDiodRight = 0;
 3e8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <prevDiodRight>
	soft_spi(sat1, sat2, 0x00);
 3ec:	40 e0       	ldi	r20, 0x00	; 0
 3ee:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <sat2>
 3f2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sat1>
 3f6:	77 df       	rcall	.-274    	; 0x2e6 <soft_spi>
	PORTD = 0x00;
 3f8:	1b b8       	out	0x0b, r1	; 11
	peaks_mode = mode;
 3fa:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <peaks_mode>
}
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <get_peaks_mode>:

uint8_t get_peaks_mode()
{
	return peaks_mode;
}
 402:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <peaks_mode>
 406:	08 95       	ret

00000408 <set_peaks_time>:

void set_peaks_time(uint8_t time)
{
	peaks_time = time * 100;
 408:	24 e6       	ldi	r18, 0x64	; 100
 40a:	82 9f       	mul	r24, r18
 40c:	c0 01       	movw	r24, r0
 40e:	11 24       	eor	r1, r1
 410:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <peaks_time+0x1>
 414:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <peaks_time>
 418:	08 95       	ret

0000041a <get_peaks_time>:
}

uint8_t get_peaks_time()
{
	return peaks_time / 100;
 41a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <peaks_time>
 41e:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <peaks_time+0x1>
 422:	36 95       	lsr	r19
 424:	27 95       	ror	r18
 426:	36 95       	lsr	r19
 428:	27 95       	ror	r18
 42a:	ab e7       	ldi	r26, 0x7B	; 123
 42c:	b4 e1       	ldi	r27, 0x14	; 20
 42e:	f9 d1       	rcall	.+1010   	; 0x822 <__umulhisi3>
 430:	96 95       	lsr	r25
 432:	87 95       	ror	r24
}
 434:	08 95       	ret

00000436 <getNumDiodByAdc>:

int8_t getNumDiodByAdc(uint16_t adc)
{
	if (adc > 870) {
 436:	87 36       	cpi	r24, 0x67	; 103
 438:	23 e0       	ldi	r18, 0x03	; 3
 43a:	92 07       	cpc	r25, r18
 43c:	f8 f4       	brcc	.+62     	; 0x47c <getNumDiodByAdc+0x46>
		return 7;
	} else if (adc > 680) {
 43e:	89 3a       	cpi	r24, 0xA9	; 169
 440:	22 e0       	ldi	r18, 0x02	; 2
 442:	92 07       	cpc	r25, r18
 444:	e8 f4       	brcc	.+58     	; 0x480 <getNumDiodByAdc+0x4a>
		return 6;
	} else if (adc > 570) {
 446:	8b 33       	cpi	r24, 0x3B	; 59
 448:	22 e0       	ldi	r18, 0x02	; 2
 44a:	92 07       	cpc	r25, r18
 44c:	d8 f4       	brcc	.+54     	; 0x484 <getNumDiodByAdc+0x4e>
		return 5;
	} else if (adc > 520) {
 44e:	89 30       	cpi	r24, 0x09	; 9
 450:	22 e0       	ldi	r18, 0x02	; 2
 452:	92 07       	cpc	r25, r18
 454:	c8 f4       	brcc	.+50     	; 0x488 <getNumDiodByAdc+0x52>
		return 4;
	} else if (adc > 440) {
 456:	89 3b       	cpi	r24, 0xB9	; 185
 458:	21 e0       	ldi	r18, 0x01	; 1
 45a:	92 07       	cpc	r25, r18
 45c:	b8 f4       	brcc	.+46     	; 0x48c <getNumDiodByAdc+0x56>
		return 3;
	} else if (adc > 330) {
 45e:	8b 34       	cpi	r24, 0x4B	; 75
 460:	21 e0       	ldi	r18, 0x01	; 1
 462:	92 07       	cpc	r25, r18
 464:	a8 f4       	brcc	.+42     	; 0x490 <getNumDiodByAdc+0x5a>
		return 2;
	} else if (adc > 220) {
 466:	8d 3d       	cpi	r24, 0xDD	; 221
 468:	91 05       	cpc	r25, r1
 46a:	a0 f4       	brcc	.+40     	; 0x494 <getNumDiodByAdc+0x5e>
		return 1;
	} else if (adc > 130) {
 46c:	21 e0       	ldi	r18, 0x01	; 1
 46e:	83 38       	cpi	r24, 0x83	; 131
 470:	91 05       	cpc	r25, r1
 472:	08 f0       	brcs	.+2      	; 0x476 <getNumDiodByAdc+0x40>
 474:	20 e0       	ldi	r18, 0x00	; 0
 476:	82 2f       	mov	r24, r18
 478:	81 95       	neg	r24
 47a:	08 95       	ret
}

int8_t getNumDiodByAdc(uint16_t adc)
{
	if (adc > 870) {
		return 7;
 47c:	87 e0       	ldi	r24, 0x07	; 7
 47e:	08 95       	ret
	} else if (adc > 680) {
		return 6;
 480:	86 e0       	ldi	r24, 0x06	; 6
 482:	08 95       	ret
	} else if (adc > 570) {
		return 5;
 484:	85 e0       	ldi	r24, 0x05	; 5
 486:	08 95       	ret
	} else if (adc > 520) {
		return 4;
 488:	84 e0       	ldi	r24, 0x04	; 4
 48a:	08 95       	ret
	} else if (adc > 440) {
		return 3;
 48c:	83 e0       	ldi	r24, 0x03	; 3
 48e:	08 95       	ret
	} else if (adc > 330) {
		return 2;
 490:	82 e0       	ldi	r24, 0x02	; 2
 492:	08 95       	ret
	} else if (adc > 220) {
		return 1;
 494:	81 e0       	ldi	r24, 0x01	; 1
	} else if (adc > 130) {
		return 0;
	}
	return -1;
}
 496:	08 95       	ret

00000498 <main>:
	return maximum;
}

int main(void)
{
	DDRD = 0xFF;
 498:	8f ef       	ldi	r24, 0xFF	; 255
 49a:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 49c:	1b b8       	out	0x0b, r1	; 11
	VPORT = 0x00;
 49e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <VPORT>
	DDR |= (1<<CLK) | (1<<DS) | (1<<E); // output
 4a2:	84 b1       	in	r24, 0x04	; 4
 4a4:	84 63       	ori	r24, 0x34	; 52
 4a6:	84 b9       	out	0x04, r24	; 4
 4a8:	83 ed       	ldi	r24, 0xD3	; 211
 4aa:	90 e3       	ldi	r25, 0x30	; 48
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <main+0x14>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <main+0x1a>
 4b2:	00 00       	nop
	_delay_ms(50);
	peaks_mode = EEPROM_read(PR_MODE_PEAKS_MODE);
 4b4:	8a e0       	ldi	r24, 0x0A	; 10
 4b6:	d8 dd       	rcall	.-1104   	; 0x68 <EEPROM_read>
 4b8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <peaks_mode>
	peaks_time = EEPROM_read(PR_MODE_PEAKS_TIME) * 100;
 4bc:	84 e1       	ldi	r24, 0x14	; 20
 4be:	d4 dd       	rcall	.-1112   	; 0x68 <EEPROM_read>
 4c0:	24 e6       	ldi	r18, 0x64	; 100
 4c2:	82 9f       	mul	r24, r18
 4c4:	c0 01       	movw	r24, r0
 4c6:	11 24       	eor	r1, r1
 4c8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <peaks_time+0x1>
 4cc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <peaks_time>
	
	set_peaks_mode(peaks_mode);
 4d0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <peaks_mode>
 4d4:	85 df       	rcall	.-246    	; 0x3e0 <set_peaks_mode>


	soft_spi(sat1, sat2, 0x00);
 4d6:	40 e0       	ldi	r20, 0x00	; 0
 4d8:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <sat2>
 4dc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sat1>
 4e0:	02 df       	rcall	.-508    	; 0x2e6 <soft_spi>
 4e2:	4f e3       	ldi	r20, 0x3F	; 63
 4e4:	8d e0       	ldi	r24, 0x0D	; 13
 4e6:	93 e0       	ldi	r25, 0x03	; 3
 4e8:	41 50       	subi	r20, 0x01	; 1
 4ea:	80 40       	sbci	r24, 0x00	; 0
 4ec:	90 40       	sbci	r25, 0x00	; 0
 4ee:	e1 f7       	brne	.-8      	; 0x4e8 <main+0x50>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <main+0x5a>
 4f2:	00 00       	nop
}

static void sat_text_anim()
{
	_delay_ms(1000);
	DDR |= (1<<CLK) | (1<<DS) | (1<<E); // output
 4f4:	84 b1       	in	r24, 0x04	; 4
 4f6:	84 63       	ori	r24, 0x34	; 52
 4f8:	84 b9       	out	0x04, r24	; 4
	soft_spi(sat1, sat2, 0b00000000);
 4fa:	40 e0       	ldi	r20, 0x00	; 0
 4fc:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <sat2>
 500:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sat1>
 504:	f0 de       	rcall	.-544    	; 0x2e6 <soft_spi>
 506:	c7 e0       	ldi	r28, 0x07	; 7
 508:	d0 e0       	ldi	r29, 0x00	; 0
}

static void sat_left_text_anim()
{
	for (int8_t k = 7; k >= 0; k--) {
		sat1 = sat1 | (1 << k);
 50a:	01 e0       	ldi	r16, 0x01	; 1
 50c:	10 e0       	ldi	r17, 0x00	; 0
 50e:	c8 01       	movw	r24, r16
 510:	0c 2e       	mov	r0, r28
 512:	02 c0       	rjmp	.+4      	; 0x518 <__stack+0x19>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	0a 94       	dec	r0
 51a:	e2 f7       	brpl	.-8      	; 0x514 <__stack+0x15>
 51c:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <sat1>
 520:	89 2b       	or	r24, r25
 522:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sat1>
		soft_spi(sat1, sat2, 0b00000000);
 526:	40 e0       	ldi	r20, 0x00	; 0
 528:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <sat2>
 52c:	dc de       	rcall	.-584    	; 0x2e6 <soft_spi>
 52e:	4f e3       	ldi	r20, 0x3F	; 63
 530:	8d e0       	ldi	r24, 0x0D	; 13
 532:	93 e0       	ldi	r25, 0x03	; 3
 534:	41 50       	subi	r20, 0x01	; 1
 536:	80 40       	sbci	r24, 0x00	; 0
 538:	90 40       	sbci	r25, 0x00	; 0
 53a:	e1 f7       	brne	.-8      	; 0x534 <__stack+0x35>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <__stack+0x3f>
 53e:	00 00       	nop
 540:	21 97       	sbiw	r28, 0x01	; 1
 542:	28 f7       	brcc	.-54     	; 0x50e <__stack+0xf>
 544:	4f e3       	ldi	r20, 0x3F	; 63
 546:	8d e0       	ldi	r24, 0x0D	; 13
 548:	93 e0       	ldi	r25, 0x03	; 3
 54a:	41 50       	subi	r20, 0x01	; 1
 54c:	80 40       	sbci	r24, 0x00	; 0
 54e:	90 40       	sbci	r25, 0x00	; 0
 550:	e1 f7       	brne	.-8      	; 0x54a <__stack+0x4b>
 552:	00 c0       	rjmp	.+0      	; 0x554 <__stack+0x55>
 554:	00 00       	nop
 556:	c7 e0       	ldi	r28, 0x07	; 7
 558:	d0 e0       	ldi	r29, 0x00	; 0
}

static void sat_right_text_anim()
{
	for (int8_t k = 7; k >= 0; k--) {
		sat2 = sat2 | (1 << k);
 55a:	01 e0       	ldi	r16, 0x01	; 1
 55c:	10 e0       	ldi	r17, 0x00	; 0
 55e:	c8 01       	movw	r24, r16
 560:	0c 2e       	mov	r0, r28
 562:	02 c0       	rjmp	.+4      	; 0x568 <__stack+0x69>
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	0a 94       	dec	r0
 56a:	e2 f7       	brpl	.-8      	; 0x564 <__stack+0x65>
 56c:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <sat2>
 570:	68 2b       	or	r22, r24
 572:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <sat2>
		soft_spi(sat1, sat2, 0b00000000);
 576:	40 e0       	ldi	r20, 0x00	; 0
 578:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sat1>
 57c:	b4 de       	rcall	.-664    	; 0x2e6 <soft_spi>
 57e:	4f e3       	ldi	r20, 0x3F	; 63
 580:	8d e0       	ldi	r24, 0x0D	; 13
 582:	93 e0       	ldi	r25, 0x03	; 3
 584:	41 50       	subi	r20, 0x01	; 1
 586:	80 40       	sbci	r24, 0x00	; 0
 588:	90 40       	sbci	r25, 0x00	; 0
 58a:	e1 f7       	brne	.-8      	; 0x584 <__stack+0x85>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <__stack+0x8f>
 58e:	00 00       	nop
 590:	21 97       	sbiw	r28, 0x01	; 1
 592:	28 f7       	brcc	.-54     	; 0x55e <__stack+0x5f>


	soft_spi(sat1, sat2, 0x00);
	
	sat_text_anim();
	m4d_adc_init_8();
 594:	37 de       	rcall	.-914    	; 0x204 <m4d_adc_init_8>
 596:	4f e7       	ldi	r20, 0x7F	; 127
 598:	8a e1       	ldi	r24, 0x1A	; 26
 59a:	96 e0       	ldi	r25, 0x06	; 6
 59c:	41 50       	subi	r20, 0x01	; 1
 59e:	80 40       	sbci	r24, 0x00	; 0
 5a0:	90 40       	sbci	r25, 0x00	; 0
 5a2:	e1 f7       	brne	.-8      	; 0x59c <__stack+0x9d>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <__stack+0xa7>
 5a6:	00 00       	nop
	_delay_ms(2000);
	
	i2c_init_as_slave();
 5a8:	67 dd       	rcall	.-1330   	; 0x78 <i2c_init_as_slave>
	sei();
 5aa:	78 94       	sei
 5ac:	d1 2c       	mov	r13, r1
 5ae:	00 e0       	ldi	r16, 0x00	; 0
					VPORT = 0;
					if (prevDiodRight != 0) {
						VPORT |= (1 << (prevDiodRight-1));
					}
				} else {
					VPORT &= ~(1 << (prevDiodRight));
 5b0:	c1 e0       	ldi	r28, 0x01	; 1
 5b2:	d0 e0       	ldi	r29, 0x00	; 0
 	//peaks_mode = 1;
 	//peaks_time = 250;

    while (1) 
    {				
		execute_command_timer();
 5b4:	fa dd       	rcall	.-1036   	; 0x1aa <execute_command_timer>
				
		if (peaks_mode == 0) {
 5b6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <peaks_mode>
 5ba:	81 11       	cpse	r24, r1
 5bc:	09 c0       	rjmp	.+18     	; 0x5d0 <__stack+0xd1>
			soft_spi(sat1, sat2, 0xff);
 5be:	4f ef       	ldi	r20, 0xFF	; 255
 5c0:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <sat2>
 5c4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sat1>
 5c8:	8e de       	rcall	.-740    	; 0x2e6 <soft_spi>
			PORTD = 0xff;
 5ca:	8f ef       	ldi	r24, 0xFF	; 255
 5cc:	8b b9       	out	0x0b, r24	; 11
			continue;
 5ce:	f2 cf       	rjmp	.-28     	; 0x5b4 <__stack+0xb5>
		} else if (peaks_mode == 2) {
 5d0:	82 30       	cpi	r24, 0x02	; 2
 5d2:	41 f4       	brne	.+16     	; 0x5e4 <__stack+0xe5>
			soft_spi(sat1, sat2, 0x00);
 5d4:	40 e0       	ldi	r20, 0x00	; 0
 5d6:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <sat2>
 5da:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sat1>
 5de:	83 de       	rcall	.-762    	; 0x2e6 <soft_spi>
			PORTD = 0x00;
 5e0:	1b b8       	out	0x0b, r1	; 11
			continue;
 5e2:	e8 cf       	rjmp	.-48     	; 0x5b4 <__stack+0xb5>
 5e4:	13 e0       	ldi	r17, 0x03	; 3
 5e6:	ed 2c       	mov	r14, r13
 5e8:	f0 2e       	mov	r15, r16
static uint16_t get_level_by_channel(uint8_t channel)
{
	uint16_t maximum = 0;
	uint16_t result = 0;
	for (uint8_t i = 0; i <= 2; i++) {
		result = m4d_adc_get_level(channel);
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	33 de       	rcall	.-922    	; 0x254 <m4d_adc_get_level>
 5ee:	e8 16       	cp	r14, r24
 5f0:	f9 06       	cpc	r15, r25
 5f2:	08 f4       	brcc	.+2      	; 0x5f6 <__stack+0xf7>
 5f4:	7c 01       	movw	r14, r24
 5f6:	11 50       	subi	r17, 0x01	; 1

static uint16_t get_level_by_channel(uint8_t channel)
{
	uint16_t maximum = 0;
	uint16_t result = 0;
	for (uint8_t i = 0; i <= 2; i++) {
 5f8:	c1 f7       	brne	.-16     	; 0x5ea <__stack+0xeb>
 5fa:	13 e0       	ldi	r17, 0x03	; 3
 5fc:	ad 2c       	mov	r10, r13
 5fe:	b0 2e       	mov	r11, r16
		result = m4d_adc_get_level(channel);
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	28 de       	rcall	.-944    	; 0x254 <m4d_adc_get_level>
 604:	a8 16       	cp	r10, r24
 606:	b9 06       	cpc	r11, r25
 608:	08 f4       	brcc	.+2      	; 0x60c <__stack+0x10d>
 60a:	5c 01       	movw	r10, r24
 60c:	11 50       	subi	r17, 0x01	; 1

static uint16_t get_level_by_channel(uint8_t channel)
{
	uint16_t maximum = 0;
	uint16_t result = 0;
	for (uint8_t i = 0; i <= 2; i++) {
 60e:	c1 f7       	brne	.-16     	; 0x600 <__stack+0x101>
		}
	
		// Производим измерение
		uint16_t levelLeft = get_level_by_channel(LEFT_CHANNEL);
		uint16_t levelRight = get_level_by_channel(RIGHT_CHANNEL);
		int8_t numDiodLeft = getNumDiodByAdc(levelLeft);
 610:	c7 01       	movw	r24, r14
 612:	11 df       	rcall	.-478    	; 0x436 <getNumDiodByAdc>
 614:	18 2f       	mov	r17, r24
		int8_t numDiodRight = getNumDiodByAdc(levelRight);
 616:	c5 01       	movw	r24, r10
 618:	0e df       	rcall	.-484    	; 0x436 <getNumDiodByAdc>
		
		if (numDiodLeft >= prevDiodLeft) {
 61a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <prevDiodLeft>
 61e:	19 17       	cp	r17, r25
 620:	6c f1       	brlt	.+90     	; 0x67c <__stack+0x17d>
			
			if (peaks_mode == 3) {
 622:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <peaks_mode>
 626:	23 30       	cpi	r18, 0x03	; 3
 628:	61 f4       	brne	.+24     	; 0x642 <__stack+0x143>
				PORTD = 0;
 62a:	1b b8       	out	0x0b, r1	; 11
				PORTD |= (1 << numDiodLeft);
 62c:	9b b1       	in	r25, 0x0b	; 11
 62e:	9e 01       	movw	r18, r28
 630:	01 2e       	mov	r0, r17
 632:	02 c0       	rjmp	.+4      	; 0x638 <__stack+0x139>
 634:	22 0f       	add	r18, r18
 636:	33 1f       	adc	r19, r19
 638:	0a 94       	dec	r0
 63a:	e2 f7       	brpl	.-8      	; 0x634 <__stack+0x135>
 63c:	29 2b       	or	r18, r25
 63e:	2b b9       	out	0x0b, r18	; 11
 640:	16 c0       	rjmp	.+44     	; 0x66e <__stack+0x16f>
			} else {
				for (int8_t i = prevDiodLeft; i <= numDiodLeft; i++) {
					PORTD |= (1 << i);
					PORTD |= (1 << numDiodLeft);
 642:	5c 2f       	mov	r21, r28
 644:	01 2e       	mov	r0, r17
 646:	01 c0       	rjmp	.+2      	; 0x64a <__stack+0x14b>
 648:	55 0f       	add	r21, r21
 64a:	0a 94       	dec	r0
 64c:	ea f7       	brpl	.-6      	; 0x648 <__stack+0x149>
			if (peaks_mode == 3) {
				PORTD = 0;
				PORTD |= (1 << numDiodLeft);
			} else {
				for (int8_t i = prevDiodLeft; i <= numDiodLeft; i++) {
					PORTD |= (1 << i);
 64e:	4b b1       	in	r20, 0x0b	; 11
 650:	9e 01       	movw	r18, r28
 652:	09 2e       	mov	r0, r25
 654:	02 c0       	rjmp	.+4      	; 0x65a <__stack+0x15b>
 656:	22 0f       	add	r18, r18
 658:	33 1f       	adc	r19, r19
 65a:	0a 94       	dec	r0
 65c:	e2 f7       	brpl	.-8      	; 0x656 <__stack+0x157>
 65e:	24 2b       	or	r18, r20
 660:	2b b9       	out	0x0b, r18	; 11
					PORTD |= (1 << numDiodLeft);
 662:	2b b1       	in	r18, 0x0b	; 11
 664:	25 2b       	or	r18, r21
 666:	2b b9       	out	0x0b, r18	; 11
 668:	9f 5f       	subi	r25, 0xFF	; 255
			
			if (peaks_mode == 3) {
				PORTD = 0;
				PORTD |= (1 << numDiodLeft);
			} else {
				for (int8_t i = prevDiodLeft; i <= numDiodLeft; i++) {
 66a:	19 17       	cp	r17, r25
 66c:	84 f7       	brge	.-32     	; 0x64e <__stack+0x14f>
					PORTD |= (1 << i);
					PORTD |= (1 << numDiodLeft);
				}
			}

			prevDiodLeft = numDiodLeft;
 66e:	10 93 10 01 	sts	0x0110, r17	; 0x800110 <prevDiodLeft>
			countLeft = 0;
 672:	d0 92 0d 01 	sts	0x010D, r13	; 0x80010d <countLeft>
 676:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <countLeft+0x1>
 67a:	41 c0       	rjmp	.+130    	; 0x6fe <__stack+0x1ff>
		} else if (numDiodLeft <= prevDiodLeft) {
			
			if (countLeft < 65535) {
 67c:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <countLeft>
 680:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <countLeft+0x1>
 684:	2f 3f       	cpi	r18, 0xFF	; 255
 686:	4f ef       	ldi	r20, 0xFF	; 255
 688:	34 07       	cpc	r19, r20
 68a:	69 f0       	breq	.+26     	; 0x6a6 <__stack+0x1a7>
				countLeft++;
 68c:	2f 5f       	subi	r18, 0xFF	; 255
 68e:	3f 4f       	sbci	r19, 0xFF	; 255
 690:	30 93 0e 01 	sts	0x010E, r19	; 0x80010e <countLeft+0x1>
 694:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <countLeft>
			}
			
			if (countLeft >= peaks_time) {
 698:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <peaks_time>
 69c:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <peaks_time+0x1>
 6a0:	24 17       	cp	r18, r20
 6a2:	35 07       	cpc	r19, r21
 6a4:	60 f1       	brcs	.+88     	; 0x6fe <__stack+0x1ff>
				if (peaks_mode == 3) {
 6a6:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <peaks_mode>
 6aa:	23 30       	cpi	r18, 0x03	; 3
 6ac:	81 f4       	brne	.+32     	; 0x6ce <__stack+0x1cf>
					PORTD = 0;
 6ae:	1b b8       	out	0x0b, r1	; 11
					if (prevDiodLeft != 0) {
 6b0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <prevDiodLeft>
 6b4:	99 23       	and	r25, r25
 6b6:	e9 f0       	breq	.+58     	; 0x6f2 <__stack+0x1f3>
						PORTD |= (1 << (prevDiodLeft-1));
 6b8:	4b b1       	in	r20, 0x0b	; 11
 6ba:	91 50       	subi	r25, 0x01	; 1
 6bc:	9e 01       	movw	r18, r28
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <__stack+0x1c5>
 6c0:	22 0f       	add	r18, r18
 6c2:	33 1f       	adc	r19, r19
 6c4:	9a 95       	dec	r25
 6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <__stack+0x1c1>
 6c8:	24 2b       	or	r18, r20
 6ca:	2b b9       	out	0x0b, r18	; 11
 6cc:	0b c0       	rjmp	.+22     	; 0x6e4 <__stack+0x1e5>
					}
				} else {
					PORTD &= ~(1 << (prevDiodLeft));
 6ce:	2b b1       	in	r18, 0x0b	; 11
 6d0:	ae 01       	movw	r20, r28
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <__stack+0x1d9>
 6d4:	44 0f       	add	r20, r20
 6d6:	55 1f       	adc	r21, r21
 6d8:	9a 95       	dec	r25
 6da:	e2 f7       	brpl	.-8      	; 0x6d4 <__stack+0x1d5>
 6dc:	94 2f       	mov	r25, r20
 6de:	90 95       	com	r25
 6e0:	92 23       	and	r25, r18
 6e2:	9b b9       	out	0x0b, r25	; 11
				}
				
				prevDiodLeft = prevDiodLeft - 1;
 6e4:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <prevDiodLeft>
 6e8:	91 50       	subi	r25, 0x01	; 1
 6ea:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <prevDiodLeft>
				if (prevDiodLeft < 0) {
 6ee:	99 23       	and	r25, r25
 6f0:	14 f4       	brge	.+4      	; 0x6f6 <__stack+0x1f7>
					prevDiodLeft = 0;
 6f2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prevDiodLeft>
				}
				countLeft = 0;
 6f6:	d0 92 0d 01 	sts	0x010D, r13	; 0x80010d <countLeft>
 6fa:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <countLeft+0x1>
			}
		}
		
		if (numDiodRight >= prevDiodRight) {
 6fe:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <prevDiodRight>
 702:	89 17       	cp	r24, r25
 704:	8c f1       	brlt	.+98     	; 0x768 <__stack+0x269>
			if (peaks_mode == 3) {
 706:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <peaks_mode>
 70a:	23 30       	cpi	r18, 0x03	; 3
 70c:	49 f4       	brne	.+18     	; 0x720 <__stack+0x221>
				VPORT = 0;
				VPORT |= (1 << numDiodRight);
 70e:	9c 2f       	mov	r25, r28
 710:	08 2e       	mov	r0, r24
 712:	01 c0       	rjmp	.+2      	; 0x716 <__stack+0x217>
 714:	99 0f       	add	r25, r25
 716:	0a 94       	dec	r0
 718:	ea f7       	brpl	.-6      	; 0x714 <__stack+0x215>
 71a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <VPORT>
 71e:	16 c0       	rjmp	.+44     	; 0x74c <__stack+0x24d>
			} else {
				for (int8_t i = prevDiodRight; i <= numDiodRight; i++) {
					VPORT |= (1 << i);
					VPORT |= (1 << numDiodRight);
 720:	3c 2f       	mov	r19, r28
 722:	08 2e       	mov	r0, r24
 724:	01 c0       	rjmp	.+2      	; 0x728 <__stack+0x229>
 726:	33 0f       	add	r19, r19
 728:	0a 94       	dec	r0
 72a:	ea f7       	brpl	.-6      	; 0x726 <__stack+0x227>
 72c:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <VPORT>
 730:	ae 01       	movw	r20, r28
 732:	09 2e       	mov	r0, r25
 734:	02 c0       	rjmp	.+4      	; 0x73a <__stack+0x23b>
 736:	44 0f       	add	r20, r20
 738:	55 1f       	adc	r21, r21
 73a:	0a 94       	dec	r0
 73c:	e2 f7       	brpl	.-8      	; 0x736 <__stack+0x237>
 73e:	23 2b       	or	r18, r19
 740:	24 2b       	or	r18, r20
 742:	9f 5f       	subi	r25, 0xFF	; 255
		if (numDiodRight >= prevDiodRight) {
			if (peaks_mode == 3) {
				VPORT = 0;
				VPORT |= (1 << numDiodRight);
			} else {
				for (int8_t i = prevDiodRight; i <= numDiodRight; i++) {
 744:	89 17       	cp	r24, r25
 746:	a4 f7       	brge	.-24     	; 0x730 <__stack+0x231>
 748:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <VPORT>
					VPORT |= (1 << i);
					VPORT |= (1 << numDiodRight);
				}
			}

			prevDiodRight = numDiodRight;
 74c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <prevDiodRight>
			soft_spi(sat1, sat2, VPORT);
 750:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <VPORT>
 754:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <sat2>
 758:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sat1>
 75c:	c4 dd       	rcall	.-1144   	; 0x2e6 <soft_spi>
			countRight = 0;
 75e:	d0 92 0b 01 	sts	0x010B, r13	; 0x80010b <countRight>
 762:	00 93 0c 01 	sts	0x010C, r16	; 0x80010c <countRight+0x1>
 766:	26 cf       	rjmp	.-436    	; 0x5b4 <__stack+0xb5>
		} else if (numDiodRight <= prevDiodRight) {
			
			if (countRight < 65535) {
 768:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <countRight>
 76c:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <countRight+0x1>
 770:	2f 3f       	cpi	r18, 0xFF	; 255
 772:	8f ef       	ldi	r24, 0xFF	; 255
 774:	38 07       	cpc	r19, r24
 776:	71 f0       	breq	.+28     	; 0x794 <__stack+0x295>
				countRight++;
 778:	2f 5f       	subi	r18, 0xFF	; 255
 77a:	3f 4f       	sbci	r19, 0xFF	; 255
 77c:	30 93 0c 01 	sts	0x010C, r19	; 0x80010c <countRight+0x1>
 780:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <countRight>
			}
			
			if (countRight >= peaks_time) {
 784:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <peaks_time>
 788:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <peaks_time+0x1>
 78c:	24 17       	cp	r18, r20
 78e:	35 07       	cpc	r19, r21
 790:	08 f4       	brcc	.+2      	; 0x794 <__stack+0x295>
 792:	10 cf       	rjmp	.-480    	; 0x5b4 <__stack+0xb5>
				if (peaks_mode == 3) {
 794:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <peaks_mode>
 798:	83 30       	cpi	r24, 0x03	; 3
 79a:	79 f4       	brne	.+30     	; 0x7ba <__stack+0x2bb>
					VPORT = 0;
					if (prevDiodRight != 0) {
 79c:	91 11       	cpse	r25, r1
 79e:	03 c0       	rjmp	.+6      	; 0x7a6 <__stack+0x2a7>
				countRight++;
			}
			
			if (countRight >= peaks_time) {
				if (peaks_mode == 3) {
					VPORT = 0;
 7a0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <VPORT>
 7a4:	1c c0       	rjmp	.+56     	; 0x7de <__stack+0x2df>
					if (prevDiodRight != 0) {
						VPORT |= (1 << (prevDiodRight-1));
 7a6:	8f ef       	ldi	r24, 0xFF	; 255
 7a8:	89 0f       	add	r24, r25
 7aa:	2c 2f       	mov	r18, r28
 7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <__stack+0x2b1>
 7ae:	22 0f       	add	r18, r18
 7b0:	8a 95       	dec	r24
 7b2:	ea f7       	brpl	.-6      	; 0x7ae <__stack+0x2af>
 7b4:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <VPORT>
 7b8:	0d c0       	rjmp	.+26     	; 0x7d4 <__stack+0x2d5>
					}
				} else {
					VPORT &= ~(1 << (prevDiodRight));
 7ba:	9e 01       	movw	r18, r28
 7bc:	09 2e       	mov	r0, r25
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <__stack+0x2c5>
 7c0:	22 0f       	add	r18, r18
 7c2:	33 1f       	adc	r19, r19
 7c4:	0a 94       	dec	r0
 7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <__stack+0x2c1>
 7c8:	20 95       	com	r18
 7ca:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <VPORT>
 7ce:	28 23       	and	r18, r24
 7d0:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <VPORT>
				}
			
				prevDiodRight = prevDiodRight - 1;
 7d4:	91 50       	subi	r25, 0x01	; 1
 7d6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <prevDiodRight>
				if (prevDiodRight < 0) {
 7da:	99 23       	and	r25, r25
 7dc:	14 f4       	brge	.+4      	; 0x7e2 <__stack+0x2e3>
					prevDiodRight = 0;
 7de:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <prevDiodRight>
				}				
				soft_spi(sat1, sat2, VPORT);
 7e2:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <VPORT>
 7e6:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <sat2>
 7ea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sat1>
 7ee:	7b dd       	rcall	.-1290   	; 0x2e6 <soft_spi>
				countRight = 0;
 7f0:	d0 92 0b 01 	sts	0x010B, r13	; 0x80010b <countRight>
 7f4:	00 93 0c 01 	sts	0x010C, r16	; 0x80010c <countRight+0x1>
 7f8:	dd ce       	rjmp	.-582    	; 0x5b4 <__stack+0xb5>

000007fa <__udivmodhi4>:
 7fa:	aa 1b       	sub	r26, r26
 7fc:	bb 1b       	sub	r27, r27
 7fe:	51 e1       	ldi	r21, 0x11	; 17
 800:	07 c0       	rjmp	.+14     	; 0x810 <__udivmodhi4_ep>

00000802 <__udivmodhi4_loop>:
 802:	aa 1f       	adc	r26, r26
 804:	bb 1f       	adc	r27, r27
 806:	a6 17       	cp	r26, r22
 808:	b7 07       	cpc	r27, r23
 80a:	10 f0       	brcs	.+4      	; 0x810 <__udivmodhi4_ep>
 80c:	a6 1b       	sub	r26, r22
 80e:	b7 0b       	sbc	r27, r23

00000810 <__udivmodhi4_ep>:
 810:	88 1f       	adc	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	5a 95       	dec	r21
 816:	a9 f7       	brne	.-22     	; 0x802 <__udivmodhi4_loop>
 818:	80 95       	com	r24
 81a:	90 95       	com	r25
 81c:	bc 01       	movw	r22, r24
 81e:	cd 01       	movw	r24, r26
 820:	08 95       	ret

00000822 <__umulhisi3>:
 822:	a2 9f       	mul	r26, r18
 824:	b0 01       	movw	r22, r0
 826:	b3 9f       	mul	r27, r19
 828:	c0 01       	movw	r24, r0
 82a:	a3 9f       	mul	r26, r19
 82c:	01 d0       	rcall	.+2      	; 0x830 <__umulhisi3+0xe>
 82e:	b2 9f       	mul	r27, r18
 830:	70 0d       	add	r23, r0
 832:	81 1d       	adc	r24, r1
 834:	11 24       	eor	r1, r1
 836:	91 1d       	adc	r25, r1
 838:	08 95       	ret

0000083a <_exit>:
 83a:	f8 94       	cli

0000083c <__stop_program>:
 83c:	ff cf       	rjmp	.-2      	; 0x83c <__stop_program>
